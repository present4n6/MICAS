# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'test.ui'
#
# Created by: PyQt5 UI code generator 5.15.2
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.
import functools

from PyQt5 import QtCore, QtGui, QtWidgets
from PyQt5.QtWidgets import *
from PyQt5.QtGui import *
from PyQt5.QtCore import *
from PySide2.QtCore import Signal
from hdfs import InsecureClient
import ctypes
import paramiko
import sys
import pymysql
from scp import SCPClient
'''

'''

conn = pymysql.connect(
    host = '127.0.0.1',
    user = 'root',
    passwd = 'syeong',
    db = 'test',
    charset = 'utf8'
)

mysql_image = []
mysql_act = []
mysql_actR = []
mysql_filelist = []

listLbl = []
listImage = []
listImage2 = []
listTemp =[]

actNum =0
imageNum =0
global text

class MyApp(QMainWindow):

    def __init__(self):
        super().__init__()
        self.initUI()

    def initUI(self):
        #변수 선언
        self.centralwidget = QtWidgets.QWidget(self)
        self.centralwidget.setObjectName("centralwidget")

        self.MainTab = QtWidgets.QTabWidget(self.centralwidget)
        self.MainTab.setGeometry(QtCore.QRect(0, 0, 1261, 901))
        self.MainTab.setObjectName("MainTab")

        self.File_UploadTab = QtWidgets.QWidget()
        self.File_UploadTab.setObjectName("File_UploadTab")

        self.Fileopen_Button = QtWidgets.QPushButton(self.File_UploadTab)
        self.Fileopen_Button.setGeometry(QtCore.QRect(10, 60, 93, 28))
        self.Fileopen_Button.setObjectName("Fileopen_Button")

        self.Fileroute_browser = QtWidgets.QTextBrowser(self.File_UploadTab)
        self.Fileroute_browser.setGeometry(QtCore.QRect(110, 60, 401, 231))
        self.Fileroute_browser.setObjectName("Fileroute_browser")

        self.Fileupload_Button = QtWidgets.QPushButton(self.File_UploadTab)
        self.Fileupload_Button.setGeometry(QtCore.QRect(10, 120, 93, 28))
        self.Fileupload_Button.setObjectName("Fileupload_Button")

        self.MakeCaseButton = QtWidgets.QPushButton(self.File_UploadTab)
        self.MakeCaseButton.setGeometry(QtCore.QRect(10, 30, 93, 28))
        self.MakeCaseButton.setObjectName("MakeCaseButton")

        self.InputCasename = QtWidgets.QLineEdit(self.File_UploadTab)
        self.InputCasename.setGeometry(QtCore.QRect(110, 30, 401, 21))
        self.InputCasename.setObjectName("InputCasename")

        self.SleuthkitTab = QtWidgets.QTabWidget(self.File_UploadTab)
        self.SleuthkitTab.setGeometry(QtCore.QRect(0, 340, 1261, 531))
        self.SleuthkitTab.setTabsClosable(True)
        self.SleuthkitTab.setObjectName("SleuthkitTab")

        self.tab = QtWidgets.QWidget()
        self.tab.setObjectName("tab")

        self.SleuthkitTab.addTab(self.tab, "")

        self.ClearButton = QtWidgets.QPushButton(self.File_UploadTab)
        self.ClearButton.setGeometry(QtCore.QRect(10, 90, 93, 28))
        self.ClearButton.setObjectName("ClearButton")

        self.DeleteCase = QtWidgets.QPushButton(self.File_UploadTab)
        self.DeleteCase.setGeometry(QtCore.QRect(10, 260, 93, 28))
        self.DeleteCase.setObjectName("DeleteCase")

        self.textBrowser = QtWidgets.QTextBrowser(self.File_UploadTab)
        self.textBrowser.setGeometry(QtCore.QRect(570, 30, 601, 261))
        self.textBrowser.setObjectName("textBrowser")

        self.line = QtWidgets.QFrame(self.File_UploadTab)
        self.line.setGeometry(QtCore.QRect(-10, 320, 1261, 20))
        self.line.setFrameShape(QtWidgets.QFrame.HLine)
        self.line.setFrameShadow(QtWidgets.QFrame.Sunken)
        self.line.setObjectName("line")

        self.MainTab.addTab(self.File_UploadTab, "")

        #여기 내가 하면 됨
        print("파일 트래킹 탭 들어가짐")
        self.File_TrackingTab = QtWidgets.QWidget()
        self.File_TrackingTab.setObjectName("File_TrackingTab")

        #self.getImageDB()
        self.getFileList()

        #제일 상위 레이아웃
        global hbox
        hbox = QtWidgets.QHBoxLayout()
        #상위 레이아웃 두 개로 쪼갠 것
        #리스트뷰 생성
        #filename_list = []
        #for i in range(1, 10):
        #    filename_list.append('바나나')
        #레이아웃 추가하기

        '''
        listView 쓰는 방식
        
        self.listview = QtWidgets.QListView(self)
        model = QStandardItemModel()
        listFile = list(mysql_filelist)
        for i in range(0, len(listFile)):
            print(i)
            model.appendRow(QStandardItem(listFile[i][1]))
        self.listview.setModel(model)

        self.hbox.addWidget(self.listview)'''
        hbox_Lvbox = QtWidgets.QVBoxLayout()
        global hbox_Rvbox
        hbox_Rvbox = QtWidgets.QVBoxLayout()
        #lbl_test = QtWidgets.QLabel('hi')
        #self.clickable(lbl_test).connect(self.showText)
        #hbox.addWidget(lbl_test)
        self.list = QtWidgets.QListWidget()

        listFile = list(mysql_filelist)
        for i in range(0, len(listFile)):
            self.list.addItem(listFile[i][1])

        hbox_Lvbox.addWidget(self.list)
        hbox.addLayout(hbox_Lvbox, 1)
        hbox.addLayout(hbox_Rvbox, 5)
#        self.setTrackingLayout(hbox_Rvbox)

        #self.isSignalConnected(self.listview, PYQT_SIGNAL('itemDoubleClicked(QListWidgetItem *)'), self.findFile(hbox_Rvbox))

        self.list.itemDoubleClicked.connect(self.findFile)

        '''
        self.hbox_Rvbox_vbox1 = QtWidgets.QVBoxLayout()
        self.hbox_Rvbox_vbox2 = QtWidgets.QVBoxLayout()
        self.hbox_Rvbox_vbox3 = QtWidgets.QVBoxLayout()
        self.hbox_Rvbox_vbox4 = QtWidgets.QVBoxLayout()

        self.lbl_hbox_Rvbox_vbox1_up = QtWidgets.QLabel('이미지1')
        self.lbl_hbox_Rvbox_vbox1_up.setFixedSize(100,50)
        self.lbl_hbox_Rvbox_vbox2_up = QtWidgets.QLabel('이미지2')
        self.lbl_hbox_Rvbox_vbox2_up.setFixedSize(100, 50)
        self.lbl_hbox_Rvbox_vbox3_up = QtWidgets.QLabel('이미지3')
        self.lbl_hbox_Rvbox_vbox3_up.setFixedSize(100, 50)
        self.lbl_hbox_Rvbox_vbox4_up = QtWidgets.QLabel('빈공간')
        self.lbl_hbox_Rvbox_vbox4_up.setFixedSize(100, 50)
        self.lbl_hbox_Rvbox_hbox4_middle = QtWidgets.QLabel('빈공간')
        self.lbl_hbox_Rvbox_hbox4_middle.setFixedSize(100, 50)
        self.lbl_hbox_Rvbox_hbox4_down = QtWidgets.QLabel('빈공간')
        self.lbl_hbox_Rvbox_hbox4_down.setFixedSize(100, 50)

        self.hbox_Rvbox_vbox1_up = QtWidgets.QVBoxLayout()
        self.hbox_Rvbox_hbox1_down = QtWidgets.QHBoxLayout()
        self.hbox_Rvbox_vbox2_up = QtWidgets.QVBoxLayout()
        self.hbox_Rvbox_hbox2_down = QtWidgets.QHBoxLayout()
        self.hbox_Rvbox_vbox3_up = QtWidgets.QVBoxLayout()
        self.hbox_Rvbox_hbox3_down = QtWidgets.QHBoxLayout()
        self.hbox_Rvbox_vbox4_up = QtWidgets.QVBoxLayout()
        self.hbox_Rvbox_vbox4_middle = QtWidgets.QVBoxLayout()
        self.hbox_Rvbox_vbox4_down = QtWidgets.QVBoxLayout()

        self.hbox_Rvbox_vbox1_up.addWidget(self.lbl_hbox_Rvbox_vbox1_up)
        self.hbox_Rvbox_vbox2_up.addWidget(self.lbl_hbox_Rvbox_vbox2_up)
        self.hbox_Rvbox_vbox3_up.addWidget(self.lbl_hbox_Rvbox_vbox3_up)
        self.hbox_Rvbox_vbox4_up.addWidget(self.lbl_hbox_Rvbox_vbox4_up)
        self.hbox_Rvbox_vbox4_middle.addWidget(self.lbl_hbox_Rvbox_hbox4_middle)
        self.hbox_Rvbox_vbox4_down.addWidget(self.lbl_hbox_Rvbox_hbox4_down)

        self.hbox_Rvbox_vbox1.addLayout(self.hbox_Rvbox_vbox1_up, 1)
        self.hbox_Rvbox_vbox1.addLayout(self.hbox_Rvbox_hbox1_down, 9)
        self.hbox_Rvbox_vbox2.addLayout(self.hbox_Rvbox_vbox2_up, 1)
        self.hbox_Rvbox_vbox2.addLayout(self.hbox_Rvbox_hbox2_down, 9)
        self.hbox_Rvbox_vbox3.addLayout(self.hbox_Rvbox_vbox3_up, 1)
        self.hbox_Rvbox_vbox3.addLayout(self.hbox_Rvbox_hbox3_down, 9)
        self.hbox_Rvbox_vbox4.addLayout(self.hbox_Rvbox_vbox4_up, 3)
        self.hbox_Rvbox_vbox4.addLayout(self.hbox_Rvbox_vbox4_middle, 4)
        self.hbox_Rvbox_vbox4.addLayout(self.hbox_Rvbox_vbox4_down, 3)

        #여기서부터 그리는 것 할 것임

        self.visual_vbox0 = QtWidgets.QVBoxLayout()
        visual_vbox0_2 = QtWidgets.QGridLayout()

        self.visual_vbox1 = QtWidgets.QVBoxLayout()
        visual_vbox1_2 = QtWidgets.QGridLayout()

        self.visual_vbox2 = QtWidgets.QVBoxLayout()
        visual_vbox2_2 = QtWidgets.QGridLayout()

        #스크롤 뷰
        #self.scrollView = QtWidgets.QScrollArea()
        #self.scrollView.setLayout(self.visual_vbox_2)

        self.hbox_Rvbox_hbox1_down.addLayout(self.visual_vbox0, 1)
        self.hbox_Rvbox_hbox1_down.addLayout(visual_vbox0_2, 9)

        self.hbox_Rvbox_hbox2_down.addLayout(self.visual_vbox1, 1)
        self.hbox_Rvbox_hbox2_down.addLayout(visual_vbox1_2, 9)

        self.hbox_Rvbox_hbox3_down.addLayout(self.visual_vbox2, 1)
        self.hbox_Rvbox_hbox3_down.addLayout(visual_vbox2_2, 9)

        self.line = QtWidgets.QFrame(self.centralwidget)
        self.line.setGeometry(QtCore.QRect(0, 0, 0, 1000))
        self.line.setLineWidth(10)
        self.line.setFrameShape(QtWidgets.QFrame.VLine)
        self.line.setFrameShadow(QtWidgets.QFrame.Sunken)
        self.line.setObjectName("line")

        self.line2 = QtWidgets.QFrame(self.centralwidget)
        self.line2.setGeometry(QtCore.QRect(0, 0, 0, 1000))
        self.line2.setFrameShape(QtWidgets.QFrame.VLine)
        self.line2.setFrameShadow(QtWidgets.QFrame.Sunken)
        self.line2.setObjectName("line")

        self.line3 = QtWidgets.QFrame(self.centralwidget)
        self.line3.setGeometry(QtCore.QRect(0, 0, 0, 1000))
        self.line3.setFrameShape(QtWidgets.QFrame.VLine)
        self.line3.setFrameShadow(QtWidgets.QFrame.Sunken)
        self.line3.setObjectName("line")

        self.visual_vbox0.addWidget(self.line)
        self.visual_vbox1.addWidget(self.line2)
        self.visual_vbox2.addWidget(self.line3)

        self.setLbl(visual_vbox0_2, visual_vbox1_2, visual_vbox2_2)
        
        
        self.lbl = QLabel()
        self.lbl.setMaximumSize(20, 20)
        self.lbl2 = QLabel()
        self.lbl2.setMaximumSize(20,20)
        self.lbl3 = QLabel()
        self.lbl3.setMaximumSize(20,20)
        self.lbl4 = QLabel()
        self.lbl4.setMaximumSize(20,20)
        self.lbl5 = QLabel()
        self.lbl5.setMaximumSize(20,20)
        self.lbl6 = QLabel()
        self.lbl6.setMaximumSize(20,20)
        self.lbl7 = QLabel()
        self.lbl7.setMaximumSize(20, 20)
        self.lbl8 = QLabel()
        self.lbl8.setMaximumSize(20,20)
        self.lbl9 = QLabel()
        self.lbl9.setMaximumSize(20,20)
        self.lbl10 = QLabel()
        self.lbl10.setMaximumSize(20,20)
        self.lbl11 = QLabel()
        self.lbl11.setMaximumSize(20,20)
        self.lbl12 = QLabel()
        self.lbl12.setMaximumSize(20,20)
        self.lbl13 = QLabel()
        self.lbl13.setMaximumSize(20,20)
        self.lbl14 = QLabel()
        self.lbl14.setMaximumSize(20,20)
        self.lbl15 = QLabel()
        self.lbl15.setMaximumSize(20,20)
        self.lbl16 = QLabel()
        self.lbl16.setMaximumSize(20,20)
        self.lbl17 = QLabel()
        self.lbl17.setMaximumSize(20,20)
        self.lbl18 = QLabel()
        self.lbl18.setMaximumSize(20,20)


        self.lbl.setPixmap(QPixmap(pixmap_red))
        self.lbl2.setPixmap(QPixmap(pixmap_red))
        self.lbl3.setPixmap(QPixmap(pixmap_orange))
        self.lbl4.setPixmap(QPixmap(pixmap_white))
        self.lbl5.setPixmap(QPixmap(pixmap_green))
        self.lbl6.setPixmap(QPixmap(pixmap_orange))
        self.lbl7.setPixmap(QPixmap(pixmap_yellow))
        self.lbl8.setPixmap(QPixmap(pixmap_blue))
        self.lbl9.setPixmap(QPixmap(pixmap_orange))
        self.lbl10.setPixmap(QPixmap(pixmap_white))
        self.lbl11.setPixmap(QPixmap(pixmap_green))
        self.lbl12.setPixmap(QPixmap(pixmap_orange))
        self.lbl13.setPixmap(QPixmap(pixmap_purple))
        self.lbl14.setPixmap(QPixmap(pixmap_white))
        self.lbl15.setPixmap(QPixmap(pixmap_white))
        self.lbl16.setPixmap(QPixmap(pixmap_yellow))
        self.lbl17.setPixmap(QPixmap(pixmap_white))
        self.lbl18.setPixmap(QPixmap(pixmap_orange))

        self.lbl2_1 = QLabel()
        self.lbl2_1.setMaximumSize(20, 20)
        self.lbl2_2 = QLabel()
        self.lbl2_2.setMaximumSize(20,20)
        self.lbl2_3 = QLabel()
        self.lbl2_3.setMaximumSize(20,20)
        self.lbl2_4 = QLabel()
        self.lbl2_4.setMaximumSize(20,20)
        self.lbl2_5 = QLabel()
        self.lbl2_5.setMaximumSize(20,20)
        self.lbl2_6 = QLabel()
        self.lbl2_6.setMaximumSize(20,20)
        self.lbl2_7 = QLabel()
        self.lbl2_7.setMaximumSize(20, 20)
        self.lbl2_8 = QLabel()
        self.lbl2_8.setMaximumSize(20,20)
        self.lbl2_9 = QLabel()
        self.lbl2_9.setMaximumSize(20,20)
        self.lbl2_10 = QLabel()
        self.lbl2_10.setMaximumSize(20,20)
        self.lbl2_11 = QLabel()
        self.lbl2_11.setMaximumSize(20,20)
        self.lbl2_12 = QLabel()
        self.lbl2_12.setMaximumSize(20,20)
        self.lbl2_13 = QLabel()
        self.lbl2_13.setMaximumSize(20,20)
        self.lbl2_14 = QLabel()
        self.lbl2_14.setMaximumSize(20,20)
        self.lbl2_15 = QLabel()
        self.lbl2_15.setMaximumSize(20,20)
        self.lbl2_16 = QLabel()
        self.lbl2_16.setMaximumSize(20,20)
        self.lbl2_17 = QLabel()
        self.lbl2_17.setMaximumSize(20,20)
        self.lbl2_18 = QLabel()
        self.lbl2_18.setMaximumSize(20,20)

        self.lbl2_1.setPixmap(QPixmap(pixmap_white))
        self.lbl2_2.setPixmap(QPixmap(pixmap_white))
        self.lbl2_3.setPixmap(QPixmap(pixmap_white))
        self.lbl2_4.setPixmap(QPixmap(pixmap_purple))
        self.lbl2_5.setPixmap(QPixmap(pixmap_white))
        self.lbl2_6.setPixmap(QPixmap(pixmap_white))
        self.lbl2_7.setPixmap(QPixmap(pixmap_white))
        self.lbl2_8.setPixmap(QPixmap(pixmap_white))
        self.lbl2_9.setPixmap(QPixmap(pixmap_white))
        self.lbl2_10.setPixmap(QPixmap(pixmap_red))
        self.lbl2_11.setPixmap(QPixmap(pixmap_white))
        self.lbl2_12.setPixmap(QPixmap(pixmap_white))
        self.lbl2_13.setPixmap(QPixmap(pixmap_white))
        self.lbl2_14.setPixmap(QPixmap(pixmap_blue))
        self.lbl2_15.setPixmap(QPixmap(pixmap_yellow))
        self.lbl2_16.setPixmap(QPixmap(pixmap_white))
        self.lbl2_17.setPixmap(QPixmap(pixmap_blue))
        self.lbl2_18.setPixmap(QPixmap(pixmap_white))

        self.visual_vbox0_2.addWidget(self.lbl, 0, 0)
        self.visual_vbox0_2.addWidget(QLabel('2020-12-09 00:00:00'), 0, 1)
        self.visual_vbox0_2.addWidget(QLabel('Email'), 0, 2)
        self.visual_vbox0_2.addWidget(self.lbl2, 1, 0)
        self.visual_vbox0_2.addWidget(QLabel('2020-12-09 00:00:00'), 1, 1)
        self.visual_vbox0_2.addWidget(QLabel('Email'), 1, 2)
        self.visual_vbox0_2.addWidget(self.lbl3, 2, 0)
        self.visual_vbox0_2.addWidget(QLabel('2020-12-09 00:00:00'), 2, 1)
        self.visual_vbox0_2.addWidget(QLabel('Web'), 2, 2)
        self.visual_vbox0_2.addWidget(self.lbl4, 3, 0)
        self.visual_vbox0_2.addWidget(QLabel(''), 3, 1)
        self.visual_vbox0_2.addWidget(QLabel(''), 3, 2)
        self.visual_vbox0_2.addWidget(self.lbl5, 4, 0)
        self.visual_vbox0_2.addWidget(QLabel('2020-12-09 00:00:00'), 4, 1)
        self.visual_vbox0_2.addWidget(QLabel('OneDrive'), 4, 2)
        self.visual_vbox0_2.addWidget(self.lbl6, 5, 0)
        self.visual_vbox0_2.addWidget(QLabel('2020-12-09 00:00:00'), 5, 1)
        self.visual_vbox0_2.addWidget(QLabel('Web'), 5, 2)
        self.visual_vbox0_2.addWidget(self.lbl7, 6, 0)
        self.visual_vbox0_2.addWidget(QLabel('2020-12-09 00:00:00'), 6, 1)
        self.visual_vbox0_2.addWidget(QLabel('Usb'), 6, 2)
        self.visual_vbox0_2.addWidget(self.lbl8, 7, 0)
        self.visual_vbox0_2.addWidget(QLabel('2020-12-09 00:00:00'), 7, 1)
        self.visual_vbox0_2.addWidget(QLabel('GoogleDrive'), 7, 2)
        self.visual_vbox0_2.addWidget(self.lbl9, 8, 0)
        self.visual_vbox0_2.addWidget(QLabel('2020-12-09 00:00:00'), 8, 1)
        self.visual_vbox0_2.addWidget(QLabel('Web'), 8, 2)
        self.visual_vbox0_2.addWidget(self.lbl10, 9, 0)
        self.visual_vbox0_2.addWidget(QLabel(''), 9, 1)
        self.visual_vbox0_2.addWidget(QLabel(''), 9, 2)
        self.visual_vbox0_2.addWidget(self.lbl11, 10, 0)
        self.visual_vbox0_2.addWidget(QLabel('2020-12-09 00:00:00'), 10, 1)
        self.visual_vbox0_2.addWidget(QLabel('OneDrive'), 10, 2)
        self.visual_vbox0_2.addWidget(self.lbl12, 11, 0)
        self.visual_vbox0_2.addWidget(QLabel('2020-12-09 00:00:00'), 11, 1)
        self.visual_vbox0_2.addWidget(QLabel('Web'), 11, 2)
        self.visual_vbox0_2.addWidget(self.lbl13, 12, 0)
        self.visual_vbox0_2.addWidget(QLabel('2020-12-09 00:00:00'), 12, 1)
        self.visual_vbox0_2.addWidget(QLabel('Dropbox'), 12, 2)
        self.visual_vbox0_2.addWidget(self.lbl14, 13, 0)
        self.visual_vbox0_2.addWidget(QLabel(''), 13, 1)
        self.visual_vbox0_2.addWidget(QLabel(''), 13, 2)
        self.visual_vbox0_2.addWidget(self.lbl15, 14, 0)
        self.visual_vbox0_2.addWidget(QLabel(''), 14, 1)
        self.visual_vbox0_2.addWidget(QLabel(''), 14, 2)
        self.visual_vbox0_2.addWidget(self.lbl16, 15, 0)
        self.visual_vbox0_2.addWidget(QLabel('2020-12-09 00:00:00'), 15, 1)
        self.visual_vbox0_2.addWidget(QLabel('Usb'), 15, 2)
        self.visual_vbox0_2.addWidget(self.lbl17, 16, 0)
        self.visual_vbox0_2.addWidget(QLabel(''), 16, 1)
        self.visual_vbox0_2.addWidget(QLabel(''), 16, 2)
        self.visual_vbox0_2.addWidget(self.lbl18, 17, 0)
        self.visual_vbox0_2.addWidget(QLabel('2020-12-09 00:00:00'), 17, 1)
        self.visual_vbox0_2.addWidget(QLabel('Web'), 17, 2)

        self.visual_vbox1_2.addWidget(self.lbl2_1, 0, 0)
        self.visual_vbox1_2.addWidget(QLabel(''), 0, 1)
        self.visual_vbox1_2.addWidget(QLabel(''), 0, 2)
        self.visual_vbox1_2.addWidget(self.lbl2_2, 1, 0)
        self.visual_vbox1_2.addWidget(QLabel(''), 1, 1)
        self.visual_vbox1_2.addWidget(QLabel(''), 1, 2)
        self.visual_vbox1_2.addWidget(self.lbl2_3, 2, 0)
        self.visual_vbox1_2.addWidget(QLabel(''), 2, 1)
        self.visual_vbox1_2.addWidget(QLabel(''), 2, 2)
        self.visual_vbox1_2.addWidget(self.lbl2_4, 3, 0)
        self.visual_vbox1_2.addWidget(QLabel('2020-12-09 00:00:00'), 3, 1)
        self.visual_vbox1_2.addWidget(QLabel('Dropbox'), 3, 2)
        self.visual_vbox1_2.addWidget(self.lbl2_5, 4, 0)
        self.visual_vbox1_2.addWidget(QLabel(''), 4, 1)
        self.visual_vbox1_2.addWidget(QLabel(''), 4, 2)
        self.visual_vbox1_2.addWidget(self.lbl2_6, 5, 0)
        self.visual_vbox1_2.addWidget(QLabel(''), 5, 1)
        self.visual_vbox1_2.addWidget(QLabel(''), 5, 2)
        self.visual_vbox1_2.addWidget(self.lbl2_7, 6, 0)
        self.visual_vbox1_2.addWidget(QLabel(''), 6, 1)
        self.visual_vbox1_2.addWidget(QLabel(''), 6, 2)
        self.visual_vbox1_2.addWidget(self.lbl2_8, 7, 0)
        self.visual_vbox1_2.addWidget(QLabel(''), 7, 1)
        self.visual_vbox1_2.addWidget(QLabel(''), 7, 2)
        self.visual_vbox1_2.addWidget(self.lbl2_9, 8, 0)
        self.visual_vbox1_2.addWidget(QLabel(''), 8, 1)
        self.visual_vbox1_2.addWidget(QLabel(''), 8, 2)
        self.visual_vbox1_2.addWidget(self.lbl2_10, 9, 0)
        self.visual_vbox1_2.addWidget(QLabel('2020-12-09 00:00:00'), 9, 1)
        self.visual_vbox1_2.addWidget(QLabel('Email'), 9, 2)
        self.visual_vbox1_2.addWidget(self.lbl2_11, 10, 0)
        self.visual_vbox1_2.addWidget(QLabel(''), 10, 1)
        self.visual_vbox1_2.addWidget(QLabel(''), 10, 2)
        self.visual_vbox1_2.addWidget(self.lbl2_12, 11, 0)
        self.visual_vbox1_2.addWidget(QLabel(''), 11, 1)
        self.visual_vbox1_2.addWidget(QLabel(''), 11, 2)
        self.visual_vbox1_2.addWidget(self.lbl2_13, 12, 0)
        self.visual_vbox1_2.addWidget(QLabel(''), 12, 1)
        self.visual_vbox1_2.addWidget(QLabel(''), 12, 2)
        self.visual_vbox1_2.addWidget(self.lbl2_14, 13, 0)
        self.visual_vbox1_2.addWidget(QLabel('2020-12-09 00:00:00'), 13, 1)
        self.visual_vbox1_2.addWidget(QLabel('GoogleDrive'), 13, 2)
        self.visual_vbox1_2.addWidget(self.lbl2_15, 14, 0)
        self.visual_vbox1_2.addWidget(QLabel('2020-12-09 00:00:00'), 14, 1)
        self.visual_vbox1_2.addWidget(QLabel('Usb'), 14, 2)
        self.visual_vbox1_2.addWidget(self.lbl2_16, 15, 0)
        self.visual_vbox1_2.addWidget(QLabel(''), 15, 1)
        self.visual_vbox1_2.addWidget(QLabel(''), 0, 2)
        self.visual_vbox1_2.addWidget(self.lbl2_17, 16, 0)
        self.visual_vbox1_2.addWidget(QLabel('2020-12-09 00:00:00'), 16, 1)
        self.visual_vbox1_2.addWidget(QLabel('GoogleDrive'), 16, 2)
        self.visual_vbox1_2.addWidget(self.lbl2_18, 17, 0)
        self.visual_vbox1_2.addWidget(QLabel(''), 17, 1)
        self.visual_vbox1_2.addWidget(QLabel(''), 17, 2)
        
        self.hbox_Rvbox.addLayout(self.hbox_Rvbox_vbox1, 1)
        self.hbox_Rvbox.addLayout(self.hbox_Rvbox_vbox2, 1)
        self.hbox_Rvbox.addLayout(self.hbox_Rvbox_vbox3, 1)
        self.hbox_Rvbox.addLayout(self.hbox_Rvbox_vbox4, 1)'''
        self.File_TrackingTab.setLayout(hbox)

        self.MainTab.addTab(self.File_TrackingTab, "")
#######################################################여기가 끝

        self.Email_AnalyzeTab = QtWidgets.QWidget()
        self.Email_AnalyzeTab.setObjectName("Email_AnalyzeTab")

        self.MainTab.addTab(self.Email_AnalyzeTab, "")

        self.Data_ExtractVerifyTab = QtWidgets.QWidget()
        self.Data_ExtractVerifyTab.setObjectName("Data_ExtractVerifyTab")

        self.Viewer_FileDB = QtWidgets.QTextBrowser(self.Data_ExtractVerifyTab)
        self.Viewer_FileDB.setGeometry(QtCore.QRect(30, 10, 1191, 401))
        self.Viewer_FileDB.setObjectName("Viewer_FileDB")

        self.Viewer_VerifyResult = QtWidgets.QTextBrowser(self.Data_ExtractVerifyTab)
        self.Viewer_VerifyResult.setGeometry(QtCore.QRect(680, 480, 541, 371))
        self.Viewer_VerifyResult.setObjectName("Viewer_VerifyResult")

        self.line_2 = QtWidgets.QFrame(self.Data_ExtractVerifyTab)
        self.line_2.setGeometry(QtCore.QRect(-10, 420, 1271, 20))
        self.line_2.setFrameShape(QtWidgets.QFrame.HLine)
        self.line_2.setFrameShadow(QtWidgets.QFrame.Sunken)
        self.line_2.setObjectName("line_2")

        self.Line_VerifyFile = QtWidgets.QLineEdit(self.Data_ExtractVerifyTab)
        self.Line_VerifyFile.setGeometry(QtCore.QRect(420, 680, 111, 21))
        self.Line_VerifyFile.setAutoFillBackground(False)
        self.Line_VerifyFile.setFrame(True)
        self.Line_VerifyFile.setClearButtonEnabled(False)
        self.Line_VerifyFile.setObjectName("Line_VerifyFile")

        self.pushButton = QtWidgets.QPushButton(self.Data_ExtractVerifyTab)
        self.pushButton.setGeometry(QtCore.QRect(550, 680, 93, 28))
        self.pushButton.setAutoFillBackground(False)
        self.pushButton.setObjectName("pushButton")

        self.Line_Extractfile = QtWidgets.QLineEdit(self.Data_ExtractVerifyTab)
        self.Line_Extractfile.setGeometry(QtCore.QRect(420, 640, 111, 21))
        self.Line_Extractfile.setObjectName("Line_Extractfile")

        self.pushButton_2 = QtWidgets.QPushButton(self.Data_ExtractVerifyTab)
        self.pushButton_2.setGeometry(QtCore.QRect(550, 640, 93, 28))
        self.pushButton_2.setObjectName("pushButton_2")

        self.Button_GetDocument = QtWidgets.QPushButton(self.Data_ExtractVerifyTab)
        self.Button_GetDocument.setGeometry(QtCore.QRect(420, 480, 221, 28))
        self.Button_GetDocument.setObjectName("Button_GetDocument")

        self.Line_VerifyHash = QtWidgets.QLineEdit(self.Data_ExtractVerifyTab)
        self.Line_VerifyHash.setGeometry(QtCore.QRect(420, 720, 111, 21))
        self.Line_VerifyHash.setObjectName("Line_VerifyHash")

        self.Line_VerifyURL = QtWidgets.QLineEdit(self.Data_ExtractVerifyTab)
        self.Line_VerifyURL.setGeometry(QtCore.QRect(420, 760, 111, 21))
        self.Line_VerifyURL.setObjectName("Line_VerifyURL")

        self.pushButton_4 = QtWidgets.QPushButton(self.Data_ExtractVerifyTab)
        self.pushButton_4.setGeometry(QtCore.QRect(550, 720, 93, 28))
        self.pushButton_4.setObjectName("pushButton_4")

        self.pushButton_5 = QtWidgets.QPushButton(self.Data_ExtractVerifyTab)
        self.pushButton_5.setGeometry(QtCore.QRect(550, 760, 93, 28))
        self.pushButton_5.setObjectName("pushButton_5")

        self.Button_GetURL = QtWidgets.QPushButton(self.Data_ExtractVerifyTab)
        self.Button_GetURL.setGeometry(QtCore.QRect(420, 560, 221, 28))
        self.Button_GetURL.setCheckable(False)
        self.Button_GetURL.setChecked(False)
        self.Button_GetURL.setObjectName("Button_GetURL")

        self.Button_GetAttachfile = QtWidgets.QPushButton(self.Data_ExtractVerifyTab)
        self.Button_GetAttachfile.setGeometry(QtCore.QRect(420, 520, 221, 28))
        self.Button_GetAttachfile.setObjectName("Button_GetAttachfile")

        self.Manual_DataExtractVerify = QtWidgets.QTextBrowser(self.Data_ExtractVerifyTab)
        self.Manual_DataExtractVerify.setGeometry(QtCore.QRect(30, 480, 361, 371))
        self.Manual_DataExtractVerify.setObjectName("Manual_DataExtractVerify")

        self.Checkbox_mftemail = QtWidgets.QCheckBox(self.Data_ExtractVerifyTab)
        self.Checkbox_mftemail.setGeometry(QtCore.QRect(420, 600, 211, 19))
        self.Checkbox_mftemail.setObjectName("Checkbox_mftemail")

        self.MainTab.addTab(self.Data_ExtractVerifyTab, "")

        self.setCentralWidget(self.centralwidget)

        #상태바 설정
        self.statusbar = QtWidgets.QStatusBar(self)
        self.statusbar.setObjectName("statusbar")
        self.setStatusBar(self.statusbar)

        self.retranslateUi(self)
        self.MainTab.setCurrentIndex(3)
        self.SleuthkitTab.setCurrentIndex(0)
        QtCore.QMetaObject.connectSlotsByName(self)

        self.Fileopen_Button.clicked.connect(self.Find_File)
        self.Fileupload_Button.clicked.connect(self.Upload_File)
        self.MakeCaseButton.clicked.connect(self.Make_Case)
        self.ClearButton.clicked.connect(self.Clear_File)
        self.SleuthkitTab.tabCloseRequested.connect(self.Close_Tab)
        self.DeleteCase.clicked.connect(self.Delete_Case)
        self.Button_GetDocument.clicked.connect(self.Get_Document)

        # mainWindow 설정
        self.setObjectName("MainWindow")
        self.resize(1253, 900)
        self.show()

    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "MICAS_v1.0"))
        self.Fileopen_Button.setText(_translate("MainWindow", "File Open"))
        self.Fileupload_Button.setText(_translate("MainWindow", "File Upload"))
        self.MakeCaseButton.setText(_translate("MainWindow", "Make Case"))
        self.SleuthkitTab.setTabText(self.SleuthkitTab.indexOf(self.tab), _translate("MainWindow", "File"))
        self.ClearButton.setText(_translate("MainWindow", "Filelist Clear"))
        self.DeleteCase.setText(_translate("MainWindow", "Delete Case"))
        self.textBrowser.setHtml(_translate("MainWindow", "<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.0//EN\" \"http://www.w3.org/TR/REC-html40/strict.dtd\">\n"
"<html><head><meta name=\"qrichtext\" content=\"1\" /><style type=\"text/css\">\n"
"p, li { white-space: pre-wrap; }\n"
"</style></head><body style=\" font-family:\'Gulim\'; font-size:9pt; font-weight:400; font-style:normal;\">\n"
"<p align=\"right\" style=\" margin-top:12px; margin-bottom:12px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\"><img src=\"MICAS.png\" style=\"float: right;\" /></p>\n"
"<p align=\"right\" style=\" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\"><span style=\" font-size:8pt; font-weight:600;\">Multiple Image Correlation Analyze System     </span></p>\n"
"<p align=\"center\" style=\"-qt-paragraph-type:empty; margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\"><br /></p>\n"
"<p align=\"center\" style=\"-qt-paragraph-type:empty; margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\"><br /></p>\n"
"<p align=\"center\" style=\" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\"><span style=\" font-size:12pt; font-weight:600; color:#0000ff;\">MICAS</span><span style=\" font-size:12pt; color:#0000ff;\"> v1.0 Manual</span></p>\n"
"<p align=\"center\" style=\"-qt-paragraph-type:empty; margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\"><br /></p>\n"
"<p align=\"center\" style=\" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\">1.<span style=\" font-size:12pt;\"> </span>Input Case Name and Make Case.</p>\n"
"<p align=\"center\" style=\"-qt-paragraph-type:empty; margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\"><br /></p>\n"
"<p align=\"center\" style=\" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\">2. Select upload files.</p>\n"
"<p align=\"center\" style=\"-qt-paragraph-type:empty; margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\"><br /></p>\n"
"<p align=\"center\" style=\" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\">3. Upload file and wait for message.</p>\n"
"<p align=\"center\" style=\"-qt-paragraph-type:empty; margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\"><br /></p>\n"
"<p align=\"center\" style=\" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\">4. After uploading the file, you can proceed with the analysis.</p>\n"
"<p align=\"center\" style=\"-qt-paragraph-type:empty; margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\"><br /></p>\n"
"<p align=\"center\" style=\" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\">5. If you want delete case, close all tab first and click &quot;Delete Case&quot;</p>\n"
"<p align=\"center\" style=\"-qt-paragraph-type:empty; margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\"><br /></p>\n"
"<p align=\"center\" style=\" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\">6. Don\'t close new tab.</p></body></html>"))
        self.MainTab.setTabText(self.MainTab.indexOf(self.File_UploadTab), _translate("MainWindow", "File Upload"))
        self.MainTab.setTabText(self.MainTab.indexOf(self.File_TrackingTab), _translate("MainWindow", "File Tracking"))
        self.MainTab.setTabText(self.MainTab.indexOf(self.Email_AnalyzeTab), _translate("MainWindow", "Email Analyze"))

        self.pushButton.setText(_translate("MainWindow", "Verify File"))
        self.pushButton_2.setText(_translate("MainWindow", "Extract File"))

        self.Button_GetDocument.setText(_translate("MainWindow", "Get Document File list in MFT"))
        self.pushButton_4.setText(_translate("MainWindow", "Verify Hash"))
        self.pushButton_5.setText(_translate("MainWindow", "Verify URL"))
        self.Button_GetURL.setText(_translate("MainWindow", "Get URL list in E-mail Data"))
        self.Button_GetAttachfile.setText(_translate("MainWindow", "Get Attachment file list in E-mail Data"))
        self.Manual_DataExtractVerify.setHtml(_translate("MainWindow", "<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.0//EN\" \"http://www.w3.org/TR/REC-html40/strict.dtd\">\n"
"<html><head><meta name=\"qrichtext\" content=\"1\" /><style type=\"text/css\">\n"
"p, li { white-space: pre-wrap; }\n"
"</style></head><body style=\" font-family:\'Gulim\'; font-size:9pt; font-weight:400; font-style:normal;\">\n"
"<p align=\"center\" style=\"-qt-paragraph-type:empty; margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\"><br /></p>\n"
"<p align=\"center\" style=\"-qt-paragraph-type:empty; margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\"><br /></p>\n"
"<p align=\"center\" style=\" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\"><span style=\" font-size:11pt; font-weight:600; color:#00007f;\">Data Extract/Verify</span></p>\n"
"<p align=\"center\" style=\"-qt-paragraph-type:empty; margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\"><br /></p>\n"
"<p align=\"center\" style=\"-qt-paragraph-type:empty; margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\"><br /></p>\n"
"<p align=\"center\" style=\" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\">1. You can get document file list in MFT.</p>\n"
"<p align=\"center\" style=\"-qt-paragraph-type:empty; margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\"><br /></p>\n"
"<p align=\"center\" style=\" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\">2. You can get Attachment file list in E-mail data.</p>\n"
"<p align=\"center\" style=\"-qt-paragraph-type:empty; margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\"><br /></p>\n"
"<p align=\"center\" style=\" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\">3. You can get URL list in E-mail Body data.</p>\n"
"<p align=\"center\" style=\"-qt-paragraph-type:empty; margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\"><br /></p>\n"
"<p align=\"center\" style=\" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\">4. You have to check first according to the target you want.</p></body></html>"))
        self.Checkbox_mftemail.setText(_translate("MainWindow", "Check=MFT, Uncheck = E-mail"))
        self.MainTab.setTabText(self.MainTab.indexOf(self.Data_ExtractVerifyTab), _translate("MainWindow", "Data Extract/Verify"))

    def Make_Case(self):
        dir_name = self.InputCasename.text()
        if dir_name:
            ip_address = '218.146.20.50'
            port_number = '9870'
            user_name = 'hadoopuser'
            host_address = 'http://' + ip_address + ':' + port_number
            hadoop = InsecureClient(host_address, user_name)
            try:
                if hadoop.list('/' + dir_name)==[] or hadoop.list('/' + dir_name):
                    ctypes.windll.user32.MessageBoxW(0, "Same Case name already existed", "Create Error", 0)
                    return
            except:
                hadoop.makedirs('/' + dir_name)
                ctypes.windll.user32.MessageBoxW(0, "Case Created", "Success", 0)
                self.InputCasename.setReadOnly(True)

    def Close_Tab(self, currentIndex):
        self.SleuthkitTab.removeTab(currentIndex)

    def Clear_File(self):
        self.Fileroute_browser.setText('')

    def Find_File(self):
        fname = QFileDialog.getOpenFileName()
        self.Fileroute_browser.append(fname[0])

    def Delete_Case(self):
        dir_name = self.InputCasename.text()
        if dir_name and self.InputCasename.isReadOnly():
            ip_address = '218.146.20.50'
            port_number = '9870'
            user_name = 'hadoopuser'
            host_address = 'http://' + ip_address + ':' + port_number
            hadoop = InsecureClient(host_address, user_name)
            hadoop.delete('/' + dir_name, True)
            ctypes.windll.user32.MessageBoxW(0, "Case %s was Deleted"%dir_name, "Case Deleted", 0)
            self.InputCasename.setReadOnly(False)
            self.InputCasename.setText('')
        self.Fileroute_browser.setText('')
        self.tab = QtWidgets.QWidget()
        self.tab.setObjectName("tab")
        self.SleuthkitTab.addTab(self.tab, "")

    def Upload_File(self):
        ip_address = '218.146.20.50'
        port_number = '9870'
        user_name = 'hadoopuser'
        if not self.Fileroute_browser.toPlainText():
            return
        else:
            file_name = self.Fileroute_browser.toPlainText().split('\n')
            dir_name = '/' + self.InputCasename.text()
            host_address = 'http://' + ip_address + ':' + port_number
            if file_name and self.InputCasename.text():
                try:
                    for file in file_name:
                        hadoop = InsecureClient(host_address, user_name)
                        hadoop.upload(dir_name, file)

                        self.tab = QtWidgets.QWidget()
                        self.tab.setObjectName("tab")
                        self.SleuthkitTab.addTab(self.tab, file.split('/')[-1])
                        self.Sleuthkit_leftview = QtWidgets.QTextBrowser(self.tab)
                        self.Sleuthkit_leftview.setGeometry(QtCore.QRect(20, 10, 551, 481))
                        self.Sleuthkit_rightview = QtWidgets.QTextBrowser(self.tab)
                        self.Sleuthkit_rightview.setGeometry(QtCore.QRect(600, 10, 551, 481))
                        cli = paramiko.SSHClient()
                        cli.set_missing_host_key_policy(paramiko.AutoAddPolicy)
                        cli.connect("218.146.20.50", port=2185, username="hadoopuser", password="bob")

                        command = 'python3 /home/hadoopuser/python_code/MICAS/ntfs_parse/hs.py /hdfs/hdfs/user/hadoopuser/test_case/m1.001'
                        stdin, stdout, stderr = cli.exec_command(command)
                        sector = stdout.read().decode('utf-8').replace('\n','')

                        command='fsstat -o %s /hdfs/hdfs/user/hadoopuser/test_case/m1.001' % sector
                        stdin , stdout, stderr = cli.exec_command(command)
                        fsstat_result=stdout.read().decode('utf-8')
                        self.Sleuthkit_rightview.setText(fsstat_result)

                        command = 'img_stat /hdfs/hdfs/user/hadoopuser/test_case/m1.001'
                        stdin, stdout, stderr = cli.exec_command(command)
                        imgstat_result=stdout.read().decode('utf-8')
                        self.Sleuthkit_leftview.append('--------------------------------------------')
                        self.Sleuthkit_leftview.append(imgstat_result)

                        command = 'mmstat /hdfs/hdfs/user/hadoopuser/test_case/m1.001'
                        stdin, stdout, stderr = cli.exec_command(command)
                        mmstat_result = stdout.read().decode('utf-8')
                        self.Sleuthkit_leftview.append('--------------------------------------------')
                        self.Sleuthkit_leftview.append(mmstat_result)

                        command = 'mmls /hdfs/hdfs/user/hadoopuser/test_case/m1.001'
                        stdin, stdout, stderr = cli.exec_command(command)
                        mmls_result = stdout.read().decode('utf-8')
                        self.Sleuthkit_leftview.append('--------------------------------------------')
                        self.Sleuthkit_leftview.append(mmls_result)


                    self.SleuthkitTab.removeTab(0)
                    ctypes.windll.user32.MessageBoxW(0, "Upload completed", "File Upload", 0)
                except:
                    ctypes.windll.user32.MessageBoxW(0, "Same file existed", "Upload Error", 0)
                    pass
            else:
                ctypes.windll.user32.MessageBoxW(0, "Make Case First", "Upload Error", 0)

    def Get_Document(self):
        cli = paramiko.SSHClient()
        cli.set_missing_host_key_policy(paramiko.AutoAddPolicy)
        cli.connect("218.146.20.50", port=2185, username="hadoopuser", password="bob")
        command='cat /home/hadoopuser/result'
        stdin , stdout, stderr = cli.exec_command(command)
        lines=stdout.readlines()
        resultData = ''.join(lines)
        print(resultData)
        self.Viewer_FileDB.setText(resultData)
    '''
    def getImageDB(self):
        cli = paramiko.SSHClient()
        cli.set_missing_host_key_policy(paramiko.AutoAddPolicy)
        cli.connect("218.146.20.50", port=2185, username="hadoopuser", password="bob")

        command = 'python3 /home/hadoopuser/python_code/MICAS/data_handling'
        cli.exec_command(command)
        #stdin, stdout, stderr = cli.exec_command('cat /home/hadoopuser/getDBImage.txt')
        #stdout = ''.join(stdout.readlines())
        #scp = SCPClient(cli.get_transport())
        cli_sftp = cli.open_sftp()
        remote_file = cli_sftp.open('/home/hadoopuser/getDBImage.csv')
        print(remote_file)
        for r in remote_file:
            mysql_image.append(r)
        print(mysql_image[1])
        #print(r)
        print("mysql_image~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~")
        print("end print~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~")'''
    '''
        print("getImageDB 들어옴")
        curs = conn.cursor()
        sql = "select * from Disk_Image;"
        curs.execute(sql)
        result = curs.fetchall()
        for r in result:
            mysql_image.append(r)
        '''
    def getActDB(self,text):
        print("getActDB 들어옴")
        curs = conn.cursor()
        sql = "select * from file_info where filename = '"+text+"';"
        curs.execute(sql)
        result = curs.fetchall()
        for r in result:
            mysql_act.append(r)

    def getActR(self, seq):
        print("getActRDB 들어옴")
        curs = conn.cursor()
        sql = "select * from move where seq = '"+str(seq)+"';"
        curs.execute(sql)
        result = curs.fetchall()
        for r in result:
            mysql_actR.append(r)

    def getFileList(self):
        curs = conn.cursor()
        sql = "select * from file;"
        curs.execute(sql)
        result = curs.fetchall()
        for r in result:
            mysql_filelist.append(r)

    def findFile(self, item):
        #global hbox_Rvbox
        #for i in reversed(range(hbox_Rvbox.count())):
        #    hbox_Rvbox.itemAt(i).widget().setParent(None)
        global pixmap_count
        pixmap_count =[0, 0, 0, 0, 0, 0, 0]
        self.clearLayout3(hbox_Rvbox)
        global hbox_Rvbox_up
        hbox_Rvbox_up = QtWidgets.QHBoxLayout()
        global hbox_Rvbox_down
        hbox_Rvbox_down = QtWidgets.QVBoxLayout()

        hbox_Rvbox.addLayout(hbox_Rvbox_up, 5)
        hbox_Rvbox.addLayout(hbox_Rvbox_down, 1)
        #hbox_Rvbox.hide()
        #print("나오기는 했냐?")
        #for i in range(hbox_Rvbox.count()):
        #    hbox_Rvbox.itemAt(i).widget().close()
        #hbox_Rvbox = QtWidgets.QHBoxLayout()
        #hbox.addLayout(hbox_Rvbox, 4)

        '''for i in reversed(range(hbox_Rvbox.count())):
            widgetToRemove = hbox_Rvbox.itemAt(i).widget()
            # remove it from the layout list
            hbox_Rvbox.removeWidget(widgetToRemove)
            # remove it from the gui
            widgetToRemove.setParent(None)'''

        #QMessageBox.information(self, "info", item.text())

        del mysql_act[:]
        self.getActDB(item.text())
        self.setTrackingLayout()

    def setTrackingLayout(self):
        print("setTrackingLayout 들어옴")
        actNum=len(mysql_act)
        if len(mysql_act)==0:
            QMessageBox.information(self, "info", "선택한 파일과 관련된 행위가 없습니다.")
        else:
            #이미지 개수 뽑기
            listImage.clear()
            for i in range(0, actNum):
                listImage.append(mysql_act[i][4])
            listTemp = set(listImage)
            listImage2 = list(listTemp)
            listImage2.sort()

            print(listImage2)

            #pixmap_line = QtGui.QPixmap("line.png")

            for i in range(0, len(listImage2)):
                #self.clearLayout3(hbox_Rvbox)
                '''
                if(count>0):
                    print("if문 들어옴")
                    self.clearLayout5(globals()[f'hbox_Rvbox_vbox{str(i)}'])
                    self.clearLayout5(globals()[f'lbl_hbox_Rvbox_vbox{str(i)}_up'])
                    self.clearLayout5(globals()[f'lbl_hbox_Rvbox_vbox{str(i)}_down'])
                    self.clearLayout5(globals()[f'visual_vbox{str(i)}_2'])
                '''
                globals()[f'hbox_Rvbox_vbox{str(i)}'] = QtWidgets.QVBoxLayout()

                globals()[f'lbl_hbox_Rvbox_vbox{str(i)}_up'] = QtWidgets.QLabel(listImage2[i])
                #globals()[f'lbl_hbox_Rvbox_vbox{str(i)}_up_font{str(i)}'] = globals()[f'lbl_hbox_Rvbox_vbox{str(i)}_up'].font()
                #globals()[f'lbl_hbox_Rvbox_vbox{str(i)}_up_font{str(i)}'].setPointSize(20)
                #globals()[f'lbl_hbox_Rvbox_vbox{str(i)}_up_font{str(i)}'].setBold(True)
                #globals()[f'lbl_hbox_Rvbox_vbox{str(i)}_up_font{str(i)}'].setFamily('Times New Roman')
                globals()[f'lbl_hbox_Rvbox_vbox{str(i)}_up'].setAlignment(Qt.AlignCenter)
                globals()[f'lbl_hbox_Rvbox_vbox{str(i)}_up'].setFixedHeight(50)

                globals()[f'hbox_Rvbox_vbox{str(i)}_up'] = QtWidgets.QVBoxLayout()
                globals()[f'hbox_Rvbox_hbox{str(i)}_down'] = QtWidgets.QHBoxLayout()

                globals()[f'hbox_Rvbox_vbox{str(i)}_up'].addWidget(globals()[f'lbl_hbox_Rvbox_vbox{str(i)}_up'])
                globals()[f'hbox_Rvbox_vbox{str(i)}'].addLayout(globals()[f'hbox_Rvbox_vbox{str(i)}_up'], 0)
                globals()[f'hbox_Rvbox_vbox{str(i)}'].addLayout(globals()[f'hbox_Rvbox_hbox{str(i)}_down'], 9)

                #globals()[f'visual_vbox{str(i)}'] = QtWidgets.QVBoxLayout()
                globals()[f'visual_vbox{str(i)}_2'] = QtWidgets.QGridLayout()

                globals()[f'line{str(i)}'] = QtWidgets.QLabel('')
                '''
                globals()[f'line{str(i)}'].setPixmap(pixmap_line)
                globals()[f'line{str(i)}'].setAlighnment(Qt.AlignRight)
                '''
                globals()[f'line{str(i)}'].setStyleSheet("border-style : solid;" "border-width:2px;"
                             "border-color: black;" "border-left: none;" "border-top: none;" "border-bottom: none")
                globals()[f'line{str(i)}'].setAlignment(Qt.AlignRight)

                #globals()[f'hbox_Rvbox_hbox{str(i)}_down'].addLayout(globals()[f'visual_vbox{str(i)}'], 1)
                globals()[f'hbox_Rvbox_hbox{str(i)}_down'].addWidget(globals()[f'line{str(i)}'], 1)
                globals()[f'hbox_Rvbox_hbox{str(i)}_down'].addLayout(globals()[f'visual_vbox{str(i)}_2'], 9)

                #globals()[f'line{str(i)}'] = QtWidgets.QFrame(self.centralwidget)
                #globals()[f'line{str(i)}'].setGeometry(QtCore.QRect(0, 0, 1, 1))
                #globals()[f'line{str(i)}'].setLineWidth(10)
                #globals()[f'line{str(i)}'].setFrameShape(QtWidgets.QFrame.VLine)
                #globals()[f'line{str(i)}'].setFrameShadow(QtWidgets.QFrame.Sunken)
                #globals()[f'line{str(i)}'].setObjectName("line")

                #globals()[f'visual_vbox{str(i)}'].addWidget(globals()[f'line{str(i)}'])
                self.setLbl(listImage2[i], i)
                hbox_Rvbox_up.addLayout(globals()[f'hbox_Rvbox_vbox{str(i)}'])

                #count = count+1

            globals()[f'hbox_Rvbox_hbox{str(len(listImage2))}'] = QtWidgets.QGridLayout()
            hbox_Rvbox_up.addLayout(globals()[f'hbox_Rvbox_hbox{str(len(listImage2))}'])
            colorCount =0
            row =0
            for i in range(0, len(pixmap_count)):
                print("for문 들어옴")
                globals()[f'variableName{str(i)}'] = QtWidgets.QLabel()
                print("변수1")
                globals()[f'variableName{str(i)}'].setMaximumSize(20, 15)
                print("변수2")
                globals()[f'typeName{str(i)}'] = QtWidgets.QLabel()
                print("변수3")
                print(pixmap_count[i])
                if pixmap_count[i]>0:
                    if i ==0:
                        print("값 0일 때")
                        self.setLegend(globals()[f'hbox_Rvbox_hbox{str(len(listImage2))}'], globals()[f'variableName{str(i)}'],
                                       globals()[f'typeName{str(i)}'], pixmap_red, 'web', row)
                    elif i ==1:
                        self.setLegend(globals()[f'hbox_Rvbox_hbox{str(len(listImage2))}'], globals()[f'variableName{str(i)}'],
                                       globals()[f'typeName{str(i)}'], pixmap_orange, 'outlook', row)
                    elif i ==2:
                        self.setLegend(globals()[f'hbox_Rvbox_hbox{str(len(listImage2))}'], globals()[f'variableName{str(i)}'],
                                       globals()[f'typeName{str(i)}'], pixmap_yellow, 'usb', row)
                    elif i ==3:
                        self.setLegend(globals()[f'hbox_Rvbox_hbox{str(len(listImage2))}'], globals()[f'variableName{str(i)}'],
                                       globals()[f'typeName{str(i)}'], pixmap_green, 'onedrive', row)
                    elif i ==4:
                        self.setLegend(globals()[f'hbox_Rvbox_hbox{str(len(listImage2))}'], globals()[f'variableName{str(i)}'],
                                       globals()[f'typeName{str(i)}'], pixmap_blue, 'dropbox', row)
                    elif i ==5:
                        self.setLegend(globals()[f'hbox_Rvbox_hbox{str(len(listImage2))}'], globals()[f'variableName{str(i)}'],
                                       globals()[f'typeName{str(i)}'], pixmap_purple, 'googledrive', row)
                    else : self.setLegend(globals()[f'hbox_Rvbox_hbox{str(len(listImage2))}'], globals()[f'variableName{str(i)}'],
                                          globals()[f'typeName{str(i)}'], pixmap_grey, 'usnjrnl', row)
                    row =row+1

            '''
            self.setLegend(pixmap_red, 'web', listImage2, 0)
            self.setLegend(pixmap_ornage, 'outlook', listImage2, 1)
            self.setLegend(pixmap_yellow, 'usb', listImage2, 2)
            self.setLegend(pixmap_green, 'onedrive', listImage2, 3)
            self.setLegend(pixmap_blue, 'dropbox', listImage2, 4)
            self.setLegend(pixmap_purple, 'googledrive', listImage2, 5)
            self.setLegend(pixmap_grey, 'usnjrnl', listImage2, 6)'''
    def setLegend(self, layout, var1, var2, pixmap_color, type, num):
        print("setLegend 들어옴")
        var1.setPixmap(pixmap_color)
        var2.setText(type)
        layout.addWidget(var1, num, 0)
        layout.addWidget(var2, num, 1)

    '''def setLegend(self, pixmap_color, type, listImage3, num):
        globals()[f'variableName{str(num)}'] = QtWidgets.QLabel()
        globals()[f'variableName{str(num)}'].setMaximumSize(20, 15)
        globals()[f'variableName{str(num)}'].setPixmap(pixmap_color)
        globals()[f'typeName{str(num)}'] = QtWidgets.QLabel(type)
        globals()[f'hbox_Rvbox_hbox{str(len(listImage3))}'].addWidget(globals()[f'variableName{str(num)}'], num, 0)
        globals()[f'hbox_Rvbox_hbox{str(len(listImage3))}'].addWidget(globals()[f'typeName{str(num)}'], num, 1)
        hbox_Rvbox_up.addLayout(globals()[f'hbox_Rvbox_hbox{str(len(listImage3))}'])
        '''
    def setLbl(self, imageName, i):
        print("setLbl 들어옴")
        #imageNum = len(mysql_image)
        actNum = len(mysql_act)
        #for i in range(0, imageNum):
        for j in range(0, actNum):
            print("for문 j들어옴")
            #listLbl.append('lbl'+str(i)+'_'+str(j))
            globals()[f'lbl{str(i)}_{str(j)}'] = QtWidgets.QLabel()
            globals()[f'lbl{str(i)}_{str(j)}'].setMaximumSize(20, 15)
            globals()[f'lbl{str(i)}_{str(j)}'].setAlignment(Qt.AlignLeft)
            self.seq = mysql_act[j][0]
            del mysql_actR[:]
            self.getActR(self.seq)
            print("mysql~~~~~~~~~~~~~")
            print(mysql_actR)
            print(mysql_actR[0][2])
            print(mysql_actR[0][3])
            globals()[f'lbl{str(i)}_{str(j)}'].setToolTip('<b>아티팩트 파일명</b> : '+mysql_actR[0][2]+"<br><b>아티팩트 타입</b> : "+mysql_actR[0][3])
            print("hihihihi~~~~~~~~~~~~~")
            self.setLblPixmap(globals()[f'lbl{str(i)}_{str(j)}'], imageName, mysql_act[j][3], mysql_act[j][4], i, j)
            self.addVisualWidget(globals()[f'lbl{str(i)}_{str(j)}'], imageName, mysql_act[j][2], mysql_act[j][3],
                        mysql_act[j][5], mysql_act[j][4], i, j)

    def setLblPixmap(self, variable, currentImageName ,type, imageName, i, j):
        print("setLblPixmap 들어옴")
        # pixmap 선언
        global pixmap_red
        pixmap_red = QtGui.QPixmap("red_rect.png")
        global pixmap_orange
        pixmap_orange = QtGui.QPixmap("orange_rect.png")
        global pixmap_yellow
        pixmap_yellow = QtGui.QPixmap("yellow_rect.png")
        global pixmap_green
        pixmap_green = QtGui.QPixmap("green_rect.png")
        global pixmap_blue
        pixmap_blue = QtGui.QPixmap("blue_rect.png")
        global pixmap_purple
        pixmap_purple = QtGui.QPixmap("purple_rect.png")
        global pixmap_grey
        pixmap_grey = QtGui.QPixmap("grey_rect.png")
        pixmap_white = QtGui.QPixmap("white_rect.png")

        if (currentImageName!=imageName):
            variable.setPixmap(pixmap_white)
        else:
            if (type =='web'):
                variable.setPixmap(pixmap_red)
                pixmap_count[0] = pixmap_count[0] + 1
                print("pixmap_count[0]"+str(pixmap_count[0]))
            elif (type == 'outlook'):
                variable.setPixmap(pixmap_orange)
                pixmap_count[1] = pixmap_count[1] + 1
            elif (type == 'usb'):
                variable.setPixmap(pixmap_yellow)
                pixmap_count[2] = pixmap_count[2] + 1
            elif (type == 'onedrive'):
                pixmap_count[3] = pixmap_count[3] + 1
                variable.setPixmap(pixmap_green)
            elif (type == 'dropbox'):
                pixmap_count[4] = pixmap_count[4] + 1
                variable.setPixmap(pixmap_blue)
            elif (type == 'googledrive'):
                pixmap_count[5] = pixmap_count[5] + 1
                variable.setPixmap(pixmap_purple)
            else:
                pixmap_count[6] = pixmap_count[6] + 1
                variable.setPixmap(pixmap_grey)
            #globals()[f'toolbar{str(i)}_{str(j)}'] = self.addToolBar(mysql_actR[j][2])
            #globals()[f'toolbar{str(i)}_{str(j)}'].addAction(variable)

    def addVisualWidget(self, variable, currentImageName, time, type, act, imageName, i, j):
        if (currentImageName!=imageName):
            globals()[f'visual_vbox{str(i)}_2'].addWidget(variable, j, 0)
            globals()[f'visual_vbox{str(i)}_2'].addWidget(QLabel(''), j, 1)
            globals()[f'visual_vbox{str(i)}_2'].addWidget(QLabel(''), j, 2)
        else:
            print("else 들어옴")
            globals()[f'visual_vbox{str(i)}_2'].addWidget(variable, j, 0)
            globals()[f'visual_vbox{str(i)}_2'].addWidget(QLabel(str(time)), j, 1)
            if(type!='usnjrnl'):
                globals()[f'visual_vbox{str(i)}_2'].addWidget(QLabel(str(type)+' '+str(act)), j, 2)
            else : globals()[f'visual_vbox{str(i)}_2'].addWidget(QLabel(str(act)), j, 2)

            #self.clickable(variable).connect(lambda: self.checkLayout(mysql_act[j][0]))

    def clearLayout3(self, layout):
        if layout is not None:
            while layout.count():
                print("여기 들어는 오냐?")
                item = layout.takeAt(0)
                print("여기 들어는 오냐?2")
                widget = item.widget()
                print("여기 들어는 오냐?3")
                if widget is not None:
                    print("여기 들어는 오냐?4")
                    widget.deleteLater()
                else:
                    print("여기 들어는 오냐?5")
                    self.clearLayout3(item.layout())
                    print("여기 들어는 오냐?6")

    def clickable(self, widget):
        class Filter(QObject):
            clicked = pyqtSignal()  # pyside2 사용자는 pyqtSignal() -> Signal()로 변경
            def eventFilter(self, obj, event):
                if obj == widget:
                    if event.type() == QEvent.MouseButtonRelease:
                        if obj.rect().contains(event.pos()):
                            self.clicked.emit()
                            # The developer can opt for .emit(obj) to get the object within the slot.
                            return True
                return False
        filter = Filter(widget)
        widget.installEventFilter(filter)
        return filter.clicked
    '''
    def checkLayout(self, seq):
        self.clearLayout3(hbox_Rvbox_down)
        self.showReason(seq)

    def showReason(self, seq):
        #self.tb.clear()
        #globals()[f'tb{str(inum)}_{str(jnum)}'].clear()

        #print(self.tb.toPlainText())
        #if(self.tb.toPlainText()!=''):
        #    self.tb.clear()
        text = ''
        self.tb = QTextBrowser()
        self.tb.setMaximumHeight(200)
        self.tb.setAlignment(Qt.AlignBottom)
        mysql_actR[:]
        self.getActR(seq)

        self.tb.setAcceptRichText(True)

        for i in mysql_actR:
            for j in range(2,7):
                if(i[j]!=''):
                    #self.tb.append(i[j])
                    text = text+i[j]+'\n'
        print(text)
        self.tb.setPlainText(text)
        hbox_Rvbox_down.addWidget(self.tb)'''
    '''
    def paintRectEvent(self, e):
        qp = QtGui.QPainter()
        qp.begin(self)
        qp.setPen(QPen(Qt.blue))
        qp.drawRect(100,100,200,200)
        qp.end()
        '''
    '''
    def drawRect(self, qp, sort):
        brush = QtGui.QBrush()
        if(sort == 'email') :
            qp.setBrush(QtGui.Qt.red)
        elif(sort =='web') :
            qp.setBrush(QtGui.Qt.yellow)
        elif(sort == 'usb') :
            qp.setBrush(QtGui.Qt.green)
        elif(sort == 'OneDrvie') :
            qp.setBrush(QtGui.Qt.blue)
        elif(sort == 'GoogleDrive') :
            qp.setBrush(QtGui.Qt.purple)
        elif(sort == 'Usnjrnl') :
            qp.setBrush(QtGui.Qt.orange)
        else: qp.setBrush(QtGui.Qt.white)

        if(countY != 0):
            yPlus =+(countY*30)

        qp.QtGui.drawRect(x, yPlus, 20, 20)
        countY=+1'''
if __name__ == "__main__":
    print("0 들어와짐")
    app = QtWidgets.QApplication(sys.argv)
    print("1 들어와짐")
    ex = MyApp()
    print("2 들어와짐")
    sys.exit(app.exec_())

