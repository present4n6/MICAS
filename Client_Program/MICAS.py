# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'test.ui'
#
# Created by: PyQt5 UI code generator 5.15.2
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.

from PyQt5 import QtCore, QtGui, QtWidgets
from PyQt5.QtWidgets import QFileDialog, QPushButton, QProgressBar, QMessageBox
from hdfs import InsecureClient
import ctypes
import paramiko
from scp import SCPClient

class Ui_MainWindow(object):
    def setupUi(self, MainWindow):
        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(1253, 900)
        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setObjectName("centralwidget")
        self.MainTab = QtWidgets.QTabWidget(self.centralwidget)
        self.MainTab.setGeometry(QtCore.QRect(0, 0, 1261, 901))
        self.MainTab.setObjectName("MainTab")
        self.File_UploadTab = QtWidgets.QWidget()
        self.File_UploadTab.setObjectName("File_UploadTab")
        self.Fileopen_Button = QtWidgets.QPushButton(self.File_UploadTab)
        self.Fileopen_Button.setGeometry(QtCore.QRect(10, 60, 93, 28))
        self.Fileopen_Button.setObjectName("Fileopen_Button")
        self.Fileroute_browser = QtWidgets.QTextBrowser(self.File_UploadTab)
        self.Fileroute_browser.setGeometry(QtCore.QRect(110, 60, 401, 231))
        self.Fileroute_browser.setObjectName("Fileroute_browser")
        self.Fileupload_Button = QtWidgets.QPushButton(self.File_UploadTab)
        self.Fileupload_Button.setGeometry(QtCore.QRect(10, 120, 93, 28))
        self.Fileupload_Button.setObjectName("Fileupload_Button")
        self.MakeCaseButton = QtWidgets.QPushButton(self.File_UploadTab)
        self.MakeCaseButton.setGeometry(QtCore.QRect(10, 30, 93, 28))
        self.MakeCaseButton.setObjectName("MakeCaseButton")
        self.InputCasename = QtWidgets.QLineEdit(self.File_UploadTab)
        self.InputCasename.setGeometry(QtCore.QRect(110, 30, 401, 21))
        self.InputCasename.setObjectName("InputCasename")
        self.SleuthkitTab = QtWidgets.QTabWidget(self.File_UploadTab)
        self.SleuthkitTab.setGeometry(QtCore.QRect(0, 340, 1261, 531))
        self.SleuthkitTab.setTabsClosable(True)
        self.SleuthkitTab.setObjectName("SleuthkitTab")
        self.tab = QtWidgets.QWidget()
        self.tab.setObjectName("tab")
        self.SleuthkitTab.addTab(self.tab, "")
        self.ClearButton = QtWidgets.QPushButton(self.File_UploadTab)
        self.ClearButton.setGeometry(QtCore.QRect(10, 90, 93, 28))
        self.ClearButton.setObjectName("ClearButton")
        self.DeleteCase = QtWidgets.QPushButton(self.File_UploadTab)
        self.DeleteCase.setGeometry(QtCore.QRect(10, 260, 93, 28))
        self.DeleteCase.setObjectName("DeleteCase")
        self.textBrowser = QtWidgets.QTextBrowser(self.File_UploadTab)
        self.textBrowser.setGeometry(QtCore.QRect(570, 30, 601, 261))
        self.textBrowser.setObjectName("textBrowser")
        self.line = QtWidgets.QFrame(self.File_UploadTab)
        self.line.setGeometry(QtCore.QRect(-10, 320, 1261, 20))
        self.line.setFrameShape(QtWidgets.QFrame.HLine)
        self.line.setFrameShadow(QtWidgets.QFrame.Sunken)
        self.line.setObjectName("line")
        self.MainTab.addTab(self.File_UploadTab, "")
        self.File_TrackingTab = QtWidgets.QWidget()
        self.File_TrackingTab.setObjectName("File_TrackingTab")
        self.MainTab.addTab(self.File_TrackingTab, "")
        self.Email_AnalyzeTab = QtWidgets.QWidget()
        self.Email_AnalyzeTab.setObjectName("Email_AnalyzeTab")
        self.MainTab.addTab(self.Email_AnalyzeTab, "")
        self.Data_ExtractVerifyTab = QtWidgets.QWidget()
        self.Data_ExtractVerifyTab.setObjectName("Data_ExtractVerifyTab")
        self.Viewer_FileDB = QtWidgets.QTextBrowser(self.Data_ExtractVerifyTab)
        self.Viewer_FileDB.setGeometry(QtCore.QRect(30, 10, 1191, 401))
        self.Viewer_FileDB.setObjectName("Viewer_FileDB")
        self.Viewer_VerifyResult = QtWidgets.QTextBrowser(self.Data_ExtractVerifyTab)
        self.Viewer_VerifyResult.setGeometry(QtCore.QRect(680, 480, 541, 371))
        self.Viewer_VerifyResult.setObjectName("Viewer_VerifyResult")
        self.line_2 = QtWidgets.QFrame(self.Data_ExtractVerifyTab)
        self.line_2.setGeometry(QtCore.QRect(-10, 420, 1271, 20))
        self.line_2.setFrameShape(QtWidgets.QFrame.HLine)
        self.line_2.setFrameShadow(QtWidgets.QFrame.Sunken)
        self.line_2.setObjectName("line_2")
        self.Line_VerifyFile = QtWidgets.QLineEdit(self.Data_ExtractVerifyTab)
        self.Line_VerifyFile.setGeometry(QtCore.QRect(420, 680, 111, 21))
        self.Line_VerifyFile.setAutoFillBackground(False)
        self.Line_VerifyFile.setFrame(True)
        self.Line_VerifyFile.setClearButtonEnabled(False)
        self.Line_VerifyFile.setObjectName("Line_VerifyFile")
        self.pushButton = QtWidgets.QPushButton(self.Data_ExtractVerifyTab)
        self.pushButton.setGeometry(QtCore.QRect(550, 680, 93, 28))
        self.pushButton.setAutoFillBackground(False)
        self.pushButton.setObjectName("pushButton")
        self.Line_Extractfile = QtWidgets.QLineEdit(self.Data_ExtractVerifyTab)
        self.Line_Extractfile.setGeometry(QtCore.QRect(420, 640, 111, 21))
        self.Line_Extractfile.setObjectName("Line_Extractfile")
        self.pushButton_2 = QtWidgets.QPushButton(self.Data_ExtractVerifyTab)
        self.pushButton_2.setGeometry(QtCore.QRect(550, 640, 93, 28))
        self.pushButton_2.setObjectName("pushButton_2")
        self.Button_GetDocument = QtWidgets.QPushButton(self.Data_ExtractVerifyTab)
        self.Button_GetDocument.setGeometry(QtCore.QRect(420, 480, 221, 28))
        self.Button_GetDocument.setObjectName("Button_GetDocument")
        self.Line_VerifyHash = QtWidgets.QLineEdit(self.Data_ExtractVerifyTab)
        self.Line_VerifyHash.setGeometry(QtCore.QRect(420, 720, 111, 21))
        self.Line_VerifyHash.setObjectName("Line_VerifyHash")
        self.Line_VerifyURL = QtWidgets.QLineEdit(self.Data_ExtractVerifyTab)
        self.Line_VerifyURL.setGeometry(QtCore.QRect(420, 760, 111, 21))
        self.Line_VerifyURL.setObjectName("Line_VerifyURL")
        self.pushButton_4 = QtWidgets.QPushButton(self.Data_ExtractVerifyTab)
        self.pushButton_4.setGeometry(QtCore.QRect(550, 720, 93, 28))
        self.pushButton_4.setObjectName("pushButton_4")
        self.pushButton_5 = QtWidgets.QPushButton(self.Data_ExtractVerifyTab)
        self.pushButton_5.setGeometry(QtCore.QRect(550, 760, 93, 28))
        self.pushButton_5.setObjectName("pushButton_5")
        self.Button_GetURL = QtWidgets.QPushButton(self.Data_ExtractVerifyTab)
        self.Button_GetURL.setGeometry(QtCore.QRect(420, 560, 221, 28))
        self.Button_GetURL.setCheckable(False)
        self.Button_GetURL.setChecked(False)
        self.Button_GetURL.setObjectName("Button_GetURL")
        self.Button_GetAttachfile = QtWidgets.QPushButton(self.Data_ExtractVerifyTab)
        self.Button_GetAttachfile.setGeometry(QtCore.QRect(420, 520, 221, 28))
        self.Button_GetAttachfile.setObjectName("Button_GetAttachfile")
        self.Manual_DataExtractVerify = QtWidgets.QTextBrowser(self.Data_ExtractVerifyTab)
        self.Manual_DataExtractVerify.setGeometry(QtCore.QRect(30, 480, 361, 371))
        self.Manual_DataExtractVerify.setObjectName("Manual_DataExtractVerify")
        self.Checkbox_mftemail = QtWidgets.QCheckBox(self.Data_ExtractVerifyTab)
        self.Checkbox_mftemail.setGeometry(QtCore.QRect(420, 600, 211, 19))
        self.Checkbox_mftemail.setObjectName("Checkbox_mftemail")
        self.MainTab.addTab(self.Data_ExtractVerifyTab, "")
        MainWindow.setCentralWidget(self.centralwidget)
        self.statusbar = QtWidgets.QStatusBar(MainWindow)
        self.statusbar.setObjectName("statusbar")
        MainWindow.setStatusBar(self.statusbar)

        self.retranslateUi(MainWindow)
        self.MainTab.setCurrentIndex(3)
        self.SleuthkitTab.setCurrentIndex(0)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)

        self.Fileopen_Button.clicked.connect(self.Find_File)
        self.Fileupload_Button.clicked.connect(self.Upload_File)
        self.MakeCaseButton.clicked.connect(self.Make_Case)
        self.ClearButton.clicked.connect(self.Clear_File)
        self.SleuthkitTab.tabCloseRequested.connect(self.Close_Tab)
        self.DeleteCase.clicked.connect(self.Delete_Case)
        self.Button_GetDocument.clicked.connect(self.Get_Document)

    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "MICAS_v1.0"))
        self.Fileopen_Button.setText(_translate("MainWindow", "File Open"))
        self.Fileupload_Button.setText(_translate("MainWindow", "File Upload"))
        self.MakeCaseButton.setText(_translate("MainWindow", "Make Case"))
        self.SleuthkitTab.setTabText(self.SleuthkitTab.indexOf(self.tab), _translate("MainWindow", "File"))
        self.ClearButton.setText(_translate("MainWindow", "Filelist Clear"))
        self.DeleteCase.setText(_translate("MainWindow", "Delete Case"))
        self.textBrowser.setHtml(_translate("MainWindow", "<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.0//EN\" \"http://www.w3.org/TR/REC-html40/strict.dtd\">\n"
"<html><head><meta name=\"qrichtext\" content=\"1\" /><style type=\"text/css\">\n"
"p, li { white-space: pre-wrap; }\n"
"</style></head><body style=\" font-family:\'Gulim\'; font-size:9pt; font-weight:400; font-style:normal;\">\n"
"<p align=\"right\" style=\" margin-top:12px; margin-bottom:12px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\"><img src=\"MICAS.png\" style=\"float: right;\" /></p>\n"
"<p align=\"right\" style=\" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\"><span style=\" font-size:8pt; font-weight:600;\">Multiple Image Correlation Analyze System     </span></p>\n"
"<p align=\"center\" style=\"-qt-paragraph-type:empty; margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\"><br /></p>\n"
"<p align=\"center\" style=\"-qt-paragraph-type:empty; margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\"><br /></p>\n"
"<p align=\"center\" style=\" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\"><span style=\" font-size:12pt; font-weight:600; color:#0000ff;\">MICAS</span><span style=\" font-size:12pt; color:#0000ff;\"> v1.0 Manual</span></p>\n"
"<p align=\"center\" style=\"-qt-paragraph-type:empty; margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\"><br /></p>\n"
"<p align=\"center\" style=\" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\">1.<span style=\" font-size:12pt;\"> </span>Input Case Name and Make Case.</p>\n"
"<p align=\"center\" style=\"-qt-paragraph-type:empty; margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\"><br /></p>\n"
"<p align=\"center\" style=\" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\">2. Select upload files.</p>\n"
"<p align=\"center\" style=\"-qt-paragraph-type:empty; margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\"><br /></p>\n"
"<p align=\"center\" style=\" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\">3. Upload file and wait for message.</p>\n"
"<p align=\"center\" style=\"-qt-paragraph-type:empty; margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\"><br /></p>\n"
"<p align=\"center\" style=\" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\">4. After uploading the file, you can proceed with the analysis.</p>\n"
"<p align=\"center\" style=\"-qt-paragraph-type:empty; margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\"><br /></p>\n"
"<p align=\"center\" style=\" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\">5. If you want delete case, close all tab first and click &quot;Delete Case&quot;</p>\n"
"<p align=\"center\" style=\"-qt-paragraph-type:empty; margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\"><br /></p>\n"
"<p align=\"center\" style=\" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\">6. Don\'t close new tab.</p></body></html>"))
        self.MainTab.setTabText(self.MainTab.indexOf(self.File_UploadTab), _translate("MainWindow", "File Upload"))
        self.MainTab.setTabText(self.MainTab.indexOf(self.File_TrackingTab), _translate("MainWindow", "File Tracking"))
        self.MainTab.setTabText(self.MainTab.indexOf(self.Email_AnalyzeTab), _translate("MainWindow", "Email Analyze"))
        self.pushButton.setText(_translate("MainWindow", "Verify File"))
        self.pushButton_2.setText(_translate("MainWindow", "Extract File"))
        self.Button_GetDocument.setText(_translate("MainWindow", "Get Document File list in MFT"))
        self.pushButton_4.setText(_translate("MainWindow", "Verify Hash"))
        self.pushButton_5.setText(_translate("MainWindow", "Verify URL"))
        self.Button_GetURL.setText(_translate("MainWindow", "Get URL list in E-mail Data"))
        self.Button_GetAttachfile.setText(_translate("MainWindow", "Get Attachment file list in E-mail Data"))
        self.Manual_DataExtractVerify.setHtml(_translate("MainWindow", "<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.0//EN\" \"http://www.w3.org/TR/REC-html40/strict.dtd\">\n"
"<html><head><meta name=\"qrichtext\" content=\"1\" /><style type=\"text/css\">\n"
"p, li { white-space: pre-wrap; }\n"
"</style></head><body style=\" font-family:\'Gulim\'; font-size:9pt; font-weight:400; font-style:normal;\">\n"
"<p align=\"center\" style=\"-qt-paragraph-type:empty; margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\"><br /></p>\n"
"<p align=\"center\" style=\"-qt-paragraph-type:empty; margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\"><br /></p>\n"
"<p align=\"center\" style=\" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\"><span style=\" font-size:11pt; font-weight:600; color:#00007f;\">Data Extract/Verify</span></p>\n"
"<p align=\"center\" style=\"-qt-paragraph-type:empty; margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\"><br /></p>\n"
"<p align=\"center\" style=\"-qt-paragraph-type:empty; margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\"><br /></p>\n"
"<p align=\"center\" style=\" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\">1. You can get document file list in MFT.</p>\n"
"<p align=\"center\" style=\"-qt-paragraph-type:empty; margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\"><br /></p>\n"
"<p align=\"center\" style=\" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\">2. You can get Attachment file list in E-mail data.</p>\n"
"<p align=\"center\" style=\"-qt-paragraph-type:empty; margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\"><br /></p>\n"
"<p align=\"center\" style=\" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\">3. You can get URL list in E-mail Body data.</p>\n"
"<p align=\"center\" style=\"-qt-paragraph-type:empty; margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\"><br /></p>\n"
"<p align=\"center\" style=\" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\">4. You have to check first according to the target you want.</p></body></html>"))
        self.Checkbox_mftemail.setText(_translate("MainWindow", "Check=MFT, Uncheck = E-mail"))
        self.MainTab.setTabText(self.MainTab.indexOf(self.Data_ExtractVerifyTab), _translate("MainWindow", "Data Extract/Verify"))

    def Make_Case(self):
        dir_name = self.InputCasename.text()
        if dir_name:
            ip_address = '218.146.20.50'
            port_number = '9870'
            user_name = 'hadoopuser'
            host_address = 'http://' + ip_address + ':' + port_number
            hadoop = InsecureClient(host_address, user_name)
            try:
                if hadoop.list('/' + dir_name)==[] or hadoop.list('/' + dir_name):
                    ctypes.windll.user32.MessageBoxW(0, "Same Case name already existed", "Create Error", 0)
                    return
            except:
                hadoop.makedirs('/' + dir_name)
                ctypes.windll.user32.MessageBoxW(0, "Case Created", "Success", 0)
                self.InputCasename.setReadOnly(True)

    def Close_Tab(self, currentIndex):
        self.SleuthkitTab.removeTab(currentIndex)

    def Clear_File(self):
        self.Fileroute_browser.setText('')

    def Find_File(self):
        fname = QFileDialog.getOpenFileName()
        self.Fileroute_browser.append(fname[0])

    def Delete_Case(self):
        dir_name = self.InputCasename.text()
        if dir_name and self.InputCasename.isReadOnly():
            ip_address = '218.146.20.50'
            port_number = '9870'
            user_name = 'hadoopuser'
            host_address = 'http://' + ip_address + ':' + port_number
            hadoop = InsecureClient(host_address, user_name)
            hadoop.delete('/' + dir_name, True)
            ctypes.windll.user32.MessageBoxW(0, "Case %s was Deleted"%dir_name, "Case Deleted", 0)
            self.InputCasename.setReadOnly(False)
            self.InputCasename.setText('')
        self.Fileroute_browser.setText('')
        self.tab = QtWidgets.QWidget()
        self.tab.setObjectName("tab")
        self.SleuthkitTab.addTab(self.tab, "")

    def Upload_File(self):
        ip_address = '218.146.20.50'
        port_number = '9870'
        user_name = 'hadoopuser'
        if not self.Fileroute_browser.toPlainText():
            return
        else:
            file_name = self.Fileroute_browser.toPlainText().split('\n')
            dir_name = '/' + self.InputCasename.text()
            host_address = 'http://' + ip_address + ':' + port_number
            if file_name and self.InputCasename.text():
                try:
                    for file in file_name:
                        hadoop = InsecureClient(host_address, user_name)
                        hadoop.upload(dir_name, file)

                        self.tab = QtWidgets.QWidget()
                        self.tab.setObjectName("tab")
                        self.SleuthkitTab.addTab(self.tab, file.split('/')[-1])
                        self.Sleuthkit_leftview = QtWidgets.QTextBrowser(self.tab)
                        self.Sleuthkit_leftview.setGeometry(QtCore.QRect(20, 10, 551, 481))
                        self.Sleuthkit_rightview = QtWidgets.QTextBrowser(self.tab)
                        self.Sleuthkit_rightview.setGeometry(QtCore.QRect(600, 10, 551, 481))
                        cli = paramiko.SSHClient()
                        cli.set_missing_host_key_policy(paramiko.AutoAddPolicy)
                        cli.connect("218.146.20.50", port=2185, username="hadoopuser", password="bob")

                        command = 'python3 /home/hadoopuser/python_code/MICAS/ntfs_parse/hs.py /hdfs/hdfs/user/hadoopuser/test_case/m1.001'
                        stdin, stdout, stderr = cli.exec_command(command)
                        sector = stdout.read().decode('utf-8').replace('\n','')

                        command='fsstat -o %s /hdfs/hdfs/user/hadoopuser/test_case/m1.001' % sector
                        stdin , stdout, stderr = cli.exec_command(command)
                        fsstat_result=stdout.read().decode('utf-8')
                        self.Sleuthkit_rightview.setText(fsstat_result)

                        command = 'img_stat /hdfs/hdfs/user/hadoopuser/test_case/m1.001'
                        stdin, stdout, stderr = cli.exec_command(command)
                        imgstat_result=stdout.read().decode('utf-8')
                        self.Sleuthkit_leftview.append('--------------------------------------------')
                        self.Sleuthkit_leftview.append(imgstat_result)

                        command = 'mmstat /hdfs/hdfs/user/hadoopuser/test_case/m1.001'
                        stdin, stdout, stderr = cli.exec_command(command)
                        mmstat_result = stdout.read().decode('utf-8')
                        self.Sleuthkit_leftview.append('--------------------------------------------')
                        self.Sleuthkit_leftview.append(mmstat_result)

                        command = 'mmls /hdfs/hdfs/user/hadoopuser/test_case/m1.001'
                        stdin, stdout, stderr = cli.exec_command(command)
                        mmls_result = stdout.read().decode('utf-8')
                        self.Sleuthkit_leftview.append('--------------------------------------------')
                        self.Sleuthkit_leftview.append(mmls_result)


                    self.SleuthkitTab.removeTab(0)
                    ctypes.windll.user32.MessageBoxW(0, "Upload completed", "File Upload", 0)
                except:
                    ctypes.windll.user32.MessageBoxW(0, "Same file existed", "Upload Error", 0)
                    pass
            else:
                ctypes.windll.user32.MessageBoxW(0, "Make Case First", "Upload Error", 0)

    def Get_Document(self):
        cli = paramiko.SSHClient()
        cli.set_missing_host_key_policy(paramiko.AutoAddPolicy)
        cli.connect("218.146.20.50", port=2185, username="hadoopuser", password="bob")
        command='cat /home/hadoopuser/result'
        stdin , stdout, stderr = cli.exec_command(command)
        lines=stdout.readlines()
        resultData = ''.join(lines)
        print(resultData)
        self.Viewer_FileDB.setText(resultData)

if __name__ == "__main__":
    import sys
    app = QtWidgets.QApplication(sys.argv)
    MainWindow = QtWidgets.QMainWindow()
    ui = Ui_MainWindow()
    ui.setupUi(MainWindow)
    MainWindow.show()
    sys.exit(app.exec_())
