# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'MICAS.ui'
#
# Created by: PyQt5 UI code generator 5.15.2
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.



import os
import sys
from PyQt5.QtGui import QIcon
from PyQt5.QtGui import QPixmap
from PyQt5 import QtCore, QtGui, QtWidgets
from PyQt5.QtWidgets import QFileDialog, QPushButton, QProgressBar, QMessageBox
from hdfs import InsecureClient
from PyQt5.QtGui import QStandardItemModel
import ctypes
import paramiko
import time, copy
from scp import SCPClient
import pymysql
from tabulate import tabulate
from PyQt5.QtCore import (QDate, QDateTime, QRegExp, QSortFilterProxyModel, Qt,
                          QTime)
from PyQt5.QtGui import QStandardItemModel
from PyQt5.QtCore import QObject, pyqtSignal
import hashlib




class ThreadClass(QtCore.QThread):
    change_value = pyqtSignal(int)

    def __init__(self, parent=None):
        super().__init__()

    def run(self):
        self.change_value.emit(0)

        self.change_value.emit(1)


class Ui_MainWindow(object):
    def __init__(self, parent=None):
        super().__init__()
        self.threadclass = ThreadClass(parent=self)

    def setupUi(self, MainWindow):
        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(1261, 894)
        MainWindow.setMinimumSize(QtCore.QSize(1261, 894))
        MainWindow.setMaximumSize(QtCore.QSize(1261, 894))
        MainWindow.setCursor(QtGui.QCursor(QtCore.Qt.ArrowCursor))
        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setObjectName("centralwidget")
        self.MainTab = QtWidgets.QTabWidget(self.centralwidget)
        self.MainTab.setGeometry(QtCore.QRect(0, 0, 1261, 901))
        self.MainTab.setTabShape(QtWidgets.QTabWidget.Triangular)
        self.MainTab.setElideMode(QtCore.Qt.ElideNone)
        self.MainTab.setUsesScrollButtons(False)
        self.MainTab.setObjectName("MainTab")
        self.File_UploadTab = QtWidgets.QWidget()
        self.File_UploadTab.setObjectName("File_UploadTab")
        self.Fileopen_Button = QtWidgets.QPushButton(self.File_UploadTab)
        self.Fileopen_Button.setGeometry(QtCore.QRect(10, 100, 93, 28))
        self.Fileopen_Button.setObjectName("Fileopen_Button")
        self.Fileroute_browser = QtWidgets.QTextBrowser(self.File_UploadTab)
        self.Fileroute_browser.setGeometry(QtCore.QRect(110, 60, 401, 231))
        self.Fileroute_browser.setObjectName("Fileroute_browser")
        self.Fileupload_Button = QtWidgets.QPushButton(self.File_UploadTab)
        self.Fileupload_Button.setGeometry(QtCore.QRect(10, 190, 93, 28))
        self.Fileupload_Button.setObjectName("Fileupload_Button")
        self.MakeCaseButton = QtWidgets.QPushButton(self.File_UploadTab)
        self.MakeCaseButton.setGeometry(QtCore.QRect(10, 30, 93, 28))
        self.MakeCaseButton.setObjectName("MakeCaseButton")
        self.InputCasename = QtWidgets.QLineEdit(self.File_UploadTab)
        self.InputCasename.setGeometry(QtCore.QRect(110, 30, 211, 21))
        font = QtGui.QFont()
        font.setFamily("굴림")
        self.InputCasename.setFont(font)
        self.InputCasename.setAlignment(QtCore.Qt.AlignCenter)
        self.InputCasename.setObjectName("InputCasename")
        self.SleuthkitTab = QtWidgets.QTabWidget(self.File_UploadTab)
        self.SleuthkitTab.setGeometry(QtCore.QRect(0, 340, 1261, 531))
        self.SleuthkitTab.setTabShape(QtWidgets.QTabWidget.Triangular)
        self.SleuthkitTab.setTabsClosable(True)
        self.SleuthkitTab.setObjectName("SleuthkitTab")
        self.tab = QtWidgets.QWidget()
        self.tab.setObjectName("tab")
        self.SleuthkitTab.addTab(self.tab, "")
        self.ClearButton = QtWidgets.QPushButton(self.File_UploadTab)
        self.ClearButton.setGeometry(QtCore.QRect(10, 160, 93, 28))
        self.ClearButton.setObjectName("ClearButton")
        self.DeleteCase = QtWidgets.QPushButton(self.File_UploadTab)
        self.DeleteCase.setGeometry(QtCore.QRect(10, 260, 93, 28))
        self.DeleteCase.setObjectName("DeleteCase")
        self.textBrowser = QtWidgets.QTextBrowser(self.File_UploadTab)
        self.textBrowser.setGeometry(QtCore.QRect(570, 30, 601, 261))
        self.textBrowser.setObjectName("textBrowser")
        self.line = QtWidgets.QFrame(self.File_UploadTab)
        self.line.setGeometry(QtCore.QRect(-10, 320, 1261, 20))
        self.line.setFrameShape(QtWidgets.QFrame.HLine)
        self.line.setFrameShadow(QtWidgets.QFrame.Sunken)
        self.line.setObjectName("line")
        self.ImageOpen_Button = QtWidgets.QPushButton(self.File_UploadTab)
        self.ImageOpen_Button.setGeometry(QtCore.QRect(10, 130, 93, 28))
        self.ImageOpen_Button.setObjectName("ImageOpen_Button")
        self.LoadCase_Button = QtWidgets.QPushButton(self.File_UploadTab)
        self.LoadCase_Button.setGeometry(QtCore.QRect(10, 60, 93, 28))
        self.LoadCase_Button.setObjectName("LoadCase_Button")
        self.LineEdit_setPassword = QtWidgets.QLineEdit(self.File_UploadTab)
        self.LineEdit_setPassword.setGeometry(QtCore.QRect(330, 30, 181, 21))
        self.LineEdit_setPassword.setAlignment(QtCore.Qt.AlignCenter)
        self.LineEdit_setPassword.setObjectName("LineEdit_setPassword")
        self.MainTab.addTab(self.File_UploadTab, "")
        self.File_TrackingTab = QtWidgets.QWidget()
        self.File_TrackingTab.setObjectName("File_TrackingTab")
        self.MainTab.addTab(self.File_TrackingTab, "")
        self.Email_AnalyzeTab = QtWidgets.QWidget()
        self.Email_AnalyzeTab.setObjectName("Email_AnalyzeTab")
        self.Tab_EmailAnalyze_Sub = QtWidgets.QTabWidget(self.Email_AnalyzeTab)
        self.Tab_EmailAnalyze_Sub.setGeometry(QtCore.QRect(0, 30, 1241, 821))
        self.Tab_EmailAnalyze_Sub.setObjectName("Tab_EmailAnalyze_Sub")
        self.EmailSubtab = QtWidgets.QWidget()
        self.EmailSubtab.setObjectName("EmailSubtab")
        self.View_Graph = matplotlibWidget(self.EmailSubtab)
        self.View_Graph.setGeometry(QtCore.QRect(10, 60, 1221, 731))
        self.View_Graph.setObjectName("View_Graph")
        self.label_4 = QtWidgets.QLabel(self.EmailSubtab)
        self.label_4.setGeometry(QtCore.QRect(410, 10, 451, 31))
        font = QtGui.QFont()
        font.setFamily("Consolas")
        font.setPointSize(16)
        self.label_4.setFont(font)
        self.label_4.setObjectName("label_4")
        self.textBrowser_2 = QtWidgets.QTextBrowser(self.EmailSubtab)
        self.textBrowser_2.setGeometry(QtCore.QRect(920, 10, 311, 41))
        self.textBrowser_2.setVerticalScrollBarPolicy(QtCore.Qt.ScrollBarAlwaysOff)
        self.textBrowser_2.setObjectName("textBrowser_2")
        self.Tab_EmailAnalyze_Sub.addTab(self.EmailSubtab, "")
        self.Analyze_Details = QtWidgets.QWidget()
        self.Analyze_Details.setObjectName("Analyze_Details")
        self.treeview_EmailData = QtWidgets.QTreeView(self.Analyze_Details)
        self.treeview_EmailData.setGeometry(QtCore.QRect(10, 80, 1211, 691))
        self.treeview_EmailData.setObjectName("treeview_EmailData")
        self.label_11 = QtWidgets.QLabel(self.Analyze_Details)
        self.label_11.setGeometry(QtCore.QRect(360, 10, 511, 31))
        font = QtGui.QFont()
        font.setFamily("Consolas")
        font.setPointSize(16)
        self.label_11.setFont(font)
        self.label_11.setLayoutDirection(QtCore.Qt.LeftToRight)
        self.label_11.setAlignment(QtCore.Qt.AlignCenter)
        self.label_11.setObjectName("label_11")
        self.label_12 = QtWidgets.QLabel(self.Analyze_Details)
        self.label_12.setGeometry(QtCore.QRect(880, 0, 191, 21))
        font = QtGui.QFont()
        font.setFamily("Consolas")
        font.setPointSize(12)
        self.label_12.setFont(font)
        self.label_12.setObjectName("label_12")
        self.lineEdit_ViewerSearch = QtWidgets.QLineEdit(self.Analyze_Details)
        self.lineEdit_ViewerSearch.setGeometry(QtCore.QRect(880, 40, 341, 31))
        self.lineEdit_ViewerSearch.setAlignment(QtCore.Qt.AlignCenter)
        self.lineEdit_ViewerSearch.setObjectName("lineEdit_ViewerSearch")
        self.Button_GetEmailData = QtWidgets.QPushButton(self.Analyze_Details)
        self.Button_GetEmailData.setGeometry(QtCore.QRect(1110, 10, 111, 28))
        self.Button_GetEmailData.setObjectName("Button_GetEmailData")
        self.line_9 = QtWidgets.QFrame(self.Analyze_Details)
        self.line_9.setGeometry(QtCore.QRect(850, 0, 16, 81))
        self.line_9.setFrameShape(QtWidgets.QFrame.VLine)
        self.line_9.setFrameShadow(QtWidgets.QFrame.Sunken)
        self.line_9.setObjectName("line_9")
        self.Tab_EmailAnalyze_Sub.addTab(self.Analyze_Details, "")
        self.Visualize_Details = QtWidgets.QWidget()
        self.Visualize_Details.setObjectName("Visualize_Details")
        self.lineEdit_FrequencyVis = QtWidgets.QLineEdit(self.Visualize_Details)
        self.lineEdit_FrequencyVis.setGeometry(QtCore.QRect(170, 730, 151, 21))
        self.lineEdit_FrequencyVis.setAlignment(QtCore.Qt.AlignCenter)
        self.lineEdit_FrequencyVis.setObjectName("lineEdit_FrequencyVis")
        self.Button_Frequency = QtWidgets.QPushButton(self.Visualize_Details)
        self.Button_Frequency.setGeometry(QtCore.QRect(270, 640, 111, 28))
        self.Button_Frequency.setObjectName("Button_Frequency")
        self.Checkbox_Attachments = QtWidgets.QCheckBox(self.Visualize_Details)
        self.Checkbox_Attachments.setGeometry(QtCore.QRect(450, 680, 96, 19))
        self.Checkbox_Attachments.setObjectName("Checkbox_Attachments")
        self.DateEdit_Frequency = QtWidgets.QDateEdit(self.Visualize_Details)
        self.DateEdit_Frequency.setGeometry(QtCore.QRect(170, 680, 101, 31))
        self.DateEdit_Frequency.setObjectName("DateEdit_Frequency")
        self.label_14 = QtWidgets.QLabel(self.Visualize_Details)
        self.label_14.setGeometry(QtCore.QRect(20, 630, 251, 31))
        font = QtGui.QFont()
        font.setFamily("Consolas")
        font.setPointSize(12)
        self.label_14.setFont(font)
        self.label_14.setObjectName("label_14")
        self.label_15 = QtWidgets.QLabel(self.Visualize_Details)
        self.label_15.setGeometry(QtCore.QRect(450, 630, 341, 31))
        font = QtGui.QFont()
        font.setFamily("Consolas")
        font.setPointSize(12)
        self.label_15.setFont(font)
        self.label_15.setObjectName("label_15")
        self.Checkbox_Address = QtWidgets.QCheckBox(self.Visualize_Details)
        self.Checkbox_Address.setGeometry(QtCore.QRect(20, 730, 141, 19))
        self.Checkbox_Address.setObjectName("Checkbox_Address")
        self.Checkbox_Keyword = QtWidgets.QCheckBox(self.Visualize_Details)
        self.Checkbox_Keyword.setGeometry(QtCore.QRect(450, 730, 96, 19))
        self.Checkbox_Keyword.setObjectName("Checkbox_Keyword")
        self.GraphicsView_Email = QtWidgets.QGraphicsView(self.Visualize_Details)
        self.GraphicsView_Email.setGeometry(QtCore.QRect(20, 50, 1201, 551))
        self.GraphicsView_Email.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.GraphicsView_Email.setFrameShadow(QtWidgets.QFrame.Sunken)
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 0))
        brush.setStyle(QtCore.Qt.NoBrush)
        self.GraphicsView_Email.setBackgroundBrush(brush)
        self.GraphicsView_Email.setDragMode(QtWidgets.QGraphicsView.NoDrag)
        self.GraphicsView_Email.setObjectName("GraphicsView_Email")
        self.Checkbox_Date = QtWidgets.QCheckBox(self.Visualize_Details)
        self.Checkbox_Date.setGeometry(QtCore.QRect(20, 680, 96, 19))
        self.Checkbox_Date.setObjectName("Checkbox_Date")
        self.lineEdit_AttachKeywordVis = QtWidgets.QLineEdit(self.Visualize_Details)
        self.lineEdit_AttachKeywordVis.setGeometry(QtCore.QRect(580, 700, 191, 31))
        font = QtGui.QFont()
        font.setFamily("굴림")
        font.setPointSize(9)
        self.lineEdit_AttachKeywordVis.setFont(font)
        self.lineEdit_AttachKeywordVis.setAlignment(QtCore.Qt.AlignCenter)
        self.lineEdit_AttachKeywordVis.setObjectName("lineEdit_AttachKeywordVis")
        self.line_10 = QtWidgets.QFrame(self.Visualize_Details)
        self.line_10.setGeometry(QtCore.QRect(0, 610, 1251, 16))
        self.line_10.setFrameShape(QtWidgets.QFrame.HLine)
        self.line_10.setFrameShadow(QtWidgets.QFrame.Sunken)
        self.line_10.setObjectName("line_10")
        self.line_11 = QtWidgets.QFrame(self.Visualize_Details)
        self.line_11.setGeometry(QtCore.QRect(393, 620, 20, 181))
        self.line_11.setFrameShape(QtWidgets.QFrame.VLine)
        self.line_11.setFrameShadow(QtWidgets.QFrame.Sunken)
        self.line_11.setObjectName("line_11")
        self.line_12 = QtWidgets.QFrame(self.Visualize_Details)
        self.line_12.setGeometry(QtCore.QRect(790, 620, 20, 181))
        self.line_12.setFrameShape(QtWidgets.QFrame.VLine)
        self.line_12.setFrameShadow(QtWidgets.QFrame.Sunken)
        self.line_12.setObjectName("line_12")
        self.textBrowser_3 = QtWidgets.QTextBrowser(self.Visualize_Details)
        self.textBrowser_3.setGeometry(QtCore.QRect(810, 630, 411, 151))
        self.textBrowser_3.setObjectName("textBrowser_3")
        self.label_16 = QtWidgets.QLabel(self.Visualize_Details)
        self.label_16.setGeometry(QtCore.QRect(380, 10, 511, 31))
        font = QtGui.QFont()
        font.setFamily("Consolas")
        font.setPointSize(16)
        self.label_16.setFont(font)
        self.label_16.setLayoutDirection(QtCore.Qt.LeftToRight)
        self.label_16.setAlignment(QtCore.Qt.AlignCenter)
        self.label_16.setObjectName("label_16")
        self.Tab_EmailAnalyze_Sub.addTab(self.Visualize_Details, "")
        self.MainTab.addTab(self.Email_AnalyzeTab, "")
        self.Data_ExtractVerifyTab = QtWidgets.QWidget()
        self.Data_ExtractVerifyTab.setObjectName("Data_ExtractVerifyTab")
        self.line_2 = QtWidgets.QFrame(self.Data_ExtractVerifyTab)
        self.line_2.setGeometry(QtCore.QRect(-10, 360, 1271, 20))
        self.line_2.setFrameShape(QtWidgets.QFrame.HLine)
        self.line_2.setFrameShadow(QtWidgets.QFrame.Sunken)
        self.line_2.setObjectName("line_2")
        self.Line_VerifyFile = QtWidgets.QLineEdit(self.Data_ExtractVerifyTab)
        self.Line_VerifyFile.setGeometry(QtCore.QRect(510, 690, 81, 21))
        font = QtGui.QFont()
        font.setFamily("굴림")
        self.Line_VerifyFile.setFont(font)
        self.Line_VerifyFile.setAutoFillBackground(False)
        self.Line_VerifyFile.setFrame(True)
        self.Line_VerifyFile.setAlignment(QtCore.Qt.AlignCenter)
        self.Line_VerifyFile.setReadOnly(True)
        self.Line_VerifyFile.setClearButtonEnabled(False)
        self.Line_VerifyFile.setObjectName("Line_VerifyFile")
        self.Button_VerifyFile = QtWidgets.QPushButton(self.Data_ExtractVerifyTab)
        self.Button_VerifyFile.setEnabled(False)
        self.Button_VerifyFile.setGeometry(QtCore.QRect(610, 690, 81, 28))
        self.Button_VerifyFile.setAutoFillBackground(False)
        self.Button_VerifyFile.setObjectName("Button_VerifyFile")
        self.Line_Extractfile = QtWidgets.QLineEdit(self.Data_ExtractVerifyTab)
        self.Line_Extractfile.setGeometry(QtCore.QRect(510, 540, 81, 21))
        font = QtGui.QFont()
        font.setFamily("굴림")
        self.Line_Extractfile.setFont(font)
        self.Line_Extractfile.setLayoutDirection(QtCore.Qt.LeftToRight)
        self.Line_Extractfile.setAlignment(QtCore.Qt.AlignCenter)
        self.Line_Extractfile.setReadOnly(True)
        self.Line_Extractfile.setCursorMoveStyle(QtCore.Qt.LogicalMoveStyle)
        self.Line_Extractfile.setClearButtonEnabled(False)
        self.Line_Extractfile.setObjectName("Line_Extractfile")
        self.Button_ExtractFile = QtWidgets.QPushButton(self.Data_ExtractVerifyTab)
        self.Button_ExtractFile.setEnabled(False)
        self.Button_ExtractFile.setGeometry(QtCore.QRect(610, 540, 81, 28))
        self.Button_ExtractFile.setCheckable(False)
        self.Button_ExtractFile.setAutoDefault(False)
        self.Button_ExtractFile.setDefault(False)
        self.Button_ExtractFile.setFlat(False)
        self.Button_ExtractFile.setObjectName("Button_ExtractFile")
        self.Button_GetDocument = QtWidgets.QPushButton(self.Data_ExtractVerifyTab)
        self.Button_GetDocument.setGeometry(QtCore.QRect(10, 60, 241, 28))
        self.Button_GetDocument.setObjectName("Button_GetDocument")
        self.Line_SearchFile = QtWidgets.QLineEdit(self.Data_ExtractVerifyTab)
        self.Line_SearchFile.setGeometry(QtCore.QRect(510, 640, 81, 21))
        font = QtGui.QFont()
        font.setFamily("굴림")
        font.setPointSize(9)
        self.Line_SearchFile.setFont(font)
        self.Line_SearchFile.setAlignment(QtCore.Qt.AlignCenter)
        self.Line_SearchFile.setReadOnly(True)
        self.Line_SearchFile.setObjectName("Line_SearchFile")
        self.Line_SearchURL = QtWidgets.QLineEdit(self.Data_ExtractVerifyTab)
        self.Line_SearchURL.setGeometry(QtCore.QRect(510, 740, 81, 21))
        font = QtGui.QFont()
        font.setFamily("굴림")
        font.setPointSize(8)
        self.Line_SearchURL.setFont(font)
        self.Line_SearchURL.setAlignment(QtCore.Qt.AlignCenter)
        self.Line_SearchURL.setReadOnly(False)
        self.Line_SearchURL.setObjectName("Line_SearchURL")
        self.Button_SearchFile = QtWidgets.QPushButton(self.Data_ExtractVerifyTab)
        self.Button_SearchFile.setEnabled(False)
        self.Button_SearchFile.setGeometry(QtCore.QRect(610, 640, 81, 28))
        self.Button_SearchFile.setObjectName("Button_SearchFile")
        self.Button_SearchURL = QtWidgets.QPushButton(self.Data_ExtractVerifyTab)
        self.Button_SearchURL.setEnabled(False)
        self.Button_SearchURL.setGeometry(QtCore.QRect(610, 740, 81, 28))
        self.Button_SearchURL.setObjectName("Button_SearchURL")
        self.Button_GetURL = QtWidgets.QPushButton(self.Data_ExtractVerifyTab)
        self.Button_GetURL.setGeometry(QtCore.QRect(10, 210, 241, 28))
        self.Button_GetURL.setCheckable(False)
        self.Button_GetURL.setChecked(False)
        self.Button_GetURL.setObjectName("Button_GetURL")
        self.Button_GetAttachfile = QtWidgets.QPushButton(self.Data_ExtractVerifyTab)
        self.Button_GetAttachfile.setGeometry(QtCore.QRect(10, 170, 241, 28))
        self.Button_GetAttachfile.setObjectName("Button_GetAttachfile")
        self.Manual_DataExtractVerify = QtWidgets.QTextBrowser(self.Data_ExtractVerifyTab)
        self.Manual_DataExtractVerify.setGeometry(QtCore.QRect(20, 400, 431, 451))
        self.Manual_DataExtractVerify.setObjectName("Manual_DataExtractVerify")
        self.Checkbox_mft = QtWidgets.QCheckBox(self.Data_ExtractVerifyTab)
        self.Checkbox_mft.setGeometry(QtCore.QRect(530, 450, 61, 19))
        self.Checkbox_mft.setObjectName("Checkbox_mft")
        self.Viewer_VerifyResult_top = QtWidgets.QTextBrowser(self.Data_ExtractVerifyTab)
        self.Viewer_VerifyResult_top.setGeometry(QtCore.QRect(740, 410, 481, 181))
        self.Viewer_VerifyResult_top.setObjectName("Viewer_VerifyResult_top")
        self.Viewer_VerifyResult_bottom = QtWidgets.QTreeView(self.Data_ExtractVerifyTab)
        self.Viewer_VerifyResult_bottom.setGeometry(QtCore.QRect(740, 640, 481, 211))
        self.Viewer_VerifyResult_bottom.setObjectName("Viewer_VerifyResult_bottom")
        self.label = QtWidgets.QLabel(self.Data_ExtractVerifyTab)
        self.label.setGeometry(QtCore.QRect(830, 370, 371, 31))
        font = QtGui.QFont()
        font.setFamily("Consolas")
        font.setPointSize(16)
        self.label.setFont(font)
        self.label.setObjectName("label")
        self.line_3 = QtWidgets.QFrame(self.Data_ExtractVerifyTab)
        self.line_3.setGeometry(QtCore.QRect(460, 370, 20, 491))
        self.line_3.setFrameShadow(QtWidgets.QFrame.Sunken)
        self.line_3.setFrameShape(QtWidgets.QFrame.VLine)
        self.line_3.setObjectName("line_3")
        self.label_2 = QtWidgets.QLabel(self.Data_ExtractVerifyTab)
        self.label_2.setGeometry(QtCore.QRect(830, 600, 381, 31))
        font = QtGui.QFont()
        font.setFamily("Consolas")
        font.setPointSize(16)
        self.label_2.setFont(font)
        self.label_2.setObjectName("label_2")
        self.label_3 = QtWidgets.QLabel(self.Data_ExtractVerifyTab)
        self.label_3.setGeometry(QtCore.QRect(660, 0, 371, 31))
        font = QtGui.QFont()
        font.setFamily("Consolas")
        font.setPointSize(18)
        self.label_3.setFont(font)
        self.label_3.setObjectName("label_3")
        self.label_5 = QtWidgets.QLabel(self.Data_ExtractVerifyTab)
        self.label_5.setGeometry(QtCore.QRect(530, 600, 151, 16))
        font = QtGui.QFont()
        font.setFamily("Consolas")
        font.setPointSize(11)
        self.label_5.setFont(font)
        self.label_5.setObjectName("label_5")
        self.Checkbox_email = QtWidgets.QCheckBox(self.Data_ExtractVerifyTab)
        self.Checkbox_email.setGeometry(QtCore.QRect(620, 450, 71, 19))
        self.Checkbox_email.setObjectName("Checkbox_email")
        self.label_6 = QtWidgets.QLabel(self.Data_ExtractVerifyTab)
        self.label_6.setGeometry(QtCore.QRect(550, 500, 101, 16))
        font = QtGui.QFont()
        font.setFamily("Consolas")
        font.setPointSize(11)
        self.label_6.setFont(font)
        self.label_6.setObjectName("label_6")
        self.label_7 = QtWidgets.QLabel(self.Data_ExtractVerifyTab)
        self.label_7.setGeometry(QtCore.QRect(550, 410, 101, 16))
        font = QtGui.QFont()
        font.setFamily("Consolas")
        font.setPointSize(11)
        self.label_7.setFont(font)
        self.label_7.setObjectName("label_7")
        self.line_4 = QtWidgets.QFrame(self.Data_ExtractVerifyTab)
        self.line_4.setGeometry(QtCore.QRect(500, 470, 201, 20))
        self.line_4.setFrameShadow(QtWidgets.QFrame.Plain)
        self.line_4.setFrameShape(QtWidgets.QFrame.HLine)
        self.line_4.setObjectName("line_4")
        self.line_5 = QtWidgets.QFrame(self.Data_ExtractVerifyTab)
        self.line_5.setGeometry(QtCore.QRect(500, 570, 201, 16))
        self.line_5.setFrameShadow(QtWidgets.QFrame.Plain)
        self.line_5.setFrameShape(QtWidgets.QFrame.HLine)
        self.line_5.setObjectName("line_5")
        self.line_6 = QtWidgets.QFrame(self.Data_ExtractVerifyTab)
        self.line_6.setGeometry(QtCore.QRect(710, 370, 20, 491))
        self.line_6.setFrameShadow(QtWidgets.QFrame.Sunken)
        self.line_6.setFrameShape(QtWidgets.QFrame.VLine)
        self.line_6.setObjectName("line_6")
        self.Viewer_FileDB = QtWidgets.QTreeView(self.Data_ExtractVerifyTab)
        self.Viewer_FileDB.setGeometry(QtCore.QRect(260, 40, 961, 301))
        self.Viewer_FileDB.setObjectName("Viewer_FileDB")
        self.label_8 = QtWidgets.QLabel(self.Data_ExtractVerifyTab)
        self.label_8.setGeometry(QtCore.QRect(90, 30, 161, 20))
        font = QtGui.QFont()
        font.setFamily("Consolas")
        font.setPointSize(14)
        self.label_8.setFont(font)
        self.label_8.setObjectName("label_8")
        self.line_7 = QtWidgets.QFrame(self.Data_ExtractVerifyTab)
        self.line_7.setGeometry(QtCore.QRect(10, 100, 241, 20))
        self.line_7.setFrameShadow(QtWidgets.QFrame.Plain)
        self.line_7.setFrameShape(QtWidgets.QFrame.HLine)
        self.line_7.setObjectName("line_7")
        self.label_9 = QtWidgets.QLabel(self.Data_ExtractVerifyTab)
        self.label_9.setGeometry(QtCore.QRect(70, 130, 201, 20))
        font = QtGui.QFont()
        font.setFamily("Consolas")
        font.setPointSize(14)
        self.label_9.setFont(font)
        self.label_9.setObjectName("label_9")
        self.label_10 = QtWidgets.QLabel(self.Data_ExtractVerifyTab)
        self.label_10.setGeometry(QtCore.QRect(60, 280, 231, 20))
        font = QtGui.QFont()
        font.setFamily("Consolas")
        font.setPointSize(14)
        self.label_10.setFont(font)
        self.label_10.setObjectName("label_10")
        self.line_8 = QtWidgets.QFrame(self.Data_ExtractVerifyTab)
        self.line_8.setGeometry(QtCore.QRect(10, 250, 241, 20))
        self.line_8.setFrameShadow(QtWidgets.QFrame.Plain)
        self.line_8.setFrameShape(QtWidgets.QFrame.HLine)
        self.line_8.setObjectName("line_8")
        self.Line_KeywordSearch = QtWidgets.QLineEdit(self.Data_ExtractVerifyTab)
        self.Line_KeywordSearch.setGeometry(QtCore.QRect(10, 310, 241, 31))
        self.Line_KeywordSearch.setAlignment(QtCore.Qt.AlignCenter)
        self.Line_KeywordSearch.setObjectName("Line_KeywordSearch")
        self.label_13 = QtWidgets.QLabel(self.Data_ExtractVerifyTab)
        self.label_13.setGeometry(QtCore.QRect(530, 620, 151, 20))
        font = QtGui.QFont()
        font.setFamily("Consolas")
        font.setPointSize(8)
        self.label_13.setFont(font)
        self.label_13.setObjectName("label_13")
        self.MainTab.addTab(self.Data_ExtractVerifyTab, "")
        MainWindow.setCentralWidget(self.centralwidget)
        self.statusbar = QtWidgets.QStatusBar(MainWindow)
        self.statusbar.setObjectName("statusbar")
        MainWindow.setStatusBar(self.statusbar)
        self.actionfile = QtWidgets.QAction(MainWindow)
        self.actionfile.setObjectName("actionfile")

        self.retranslateUi(MainWindow)
        self.MainTab.setCurrentIndex(2)
        self.SleuthkitTab.setCurrentIndex(0)
        self.Tab_EmailAnalyze_Sub.setCurrentIndex(2)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)

        self.Fileopen_Button.clicked.connect(self.Find_File)
        self.Fileupload_Button.clicked.connect(self.Upload_File)
        self.MakeCaseButton.clicked.connect(self.Make_Case)
        self.ClearButton.clicked.connect(self.Clear_File)
        self.SleuthkitTab.tabCloseRequested.connect(self.Close_Tab)
        self.DeleteCase.clicked.connect(self.Delete_Case)
        self.Button_GetDocument.clicked.connect(self.Get_Document)
        self.Button_GetAttachfile.clicked.connect(self.Get_Attachfile)
        self.Button_GetURL.clicked.connect(self.Get_URL)
        self.Button_ExtractFile.clicked.connect(self.Extract_File)
        self.Button_VerifyFile.clicked.connect(self.Verify_File)
        self.Button_SearchFile.clicked.connect(self.Search_File)
        self.Button_SearchURL.clicked.connect(self.Verify_URL)
        self.Button_GetEmailData.clicked.connect(self.View_EmailData)
        self.Button_Frequency.clicked.connect(self.Frequency_Date)
        self.ImageOpen_Button.clicked.connect(self.Find_Image)
        self.LoadCase_Button.clicked.connect(self.Load_Case)

        self.verifymodel = self.Create_Verifymodel()
        self.Viewer_VerifyResult_bottom.setModel(self.verifymodel)
        self.Viewer_FileDB.clicked.connect(self.Viewer_FileDBClicked)
        self.Checkbox_mft.clicked.connect(self.Check_mft)
        self.Checkbox_email.clicked.connect(self.Check_email)
        self.Checkbox_Attachments.clicked.connect(self.Check_Attachments)
        self.Checkbox_Keyword.clicked.connect(self.Check_Keyword)

        self.treeview_EmailData.setSortingEnabled(True)
        self.Viewer_FileDB.setSortingEnabled(True)
        self.Viewer_FileDB_Status = 0
        self.CaseName = ''
        self.Line_KeywordSearch.returnPressed.connect(self.Keyword_Search)
        self.lineEdit_ViewerSearch.returnPressed.connect(self.View_Email_KeywordSearch)
        self.lineEdit_AttachKeywordVis.returnPressed.connect(self.Visualize_Attachments_Keyword)
        self.File_TrackingTab.setDisabled(True)
        self.Email_AnalyzeTab.setDisabled(True)
        self.Data_ExtractVerifyTab.setDisabled(True)


    def Load_Case(self):
        if self.InputCasename.text()=='':
            return

        cli = paramiko.SSHClient()
        cli.set_missing_host_key_policy(paramiko.AutoAddPolicy)
        cli.connect("218.146.20.50", port=2185, username="hadoopuser", password="bob")


        command = 'cat /hdfs/%s/password.txt' % self.InputCasename.text()
        stdin, stdout, stderr = cli.exec_command(command)
        stdout = ''.join(stdout.readlines())


        enc = hashlib.md5()
        enc.update(self.LineEdit_setPassword.text().encode('utf-8'))
        encText = enc.hexdigest()

        if stdout==encText:
            self.CaseName = self.InputCasename.text()
            self.InputCasename.setReadOnly(True)
            ctypes.windll.user32.MessageBoxW(0, "Case Open Completed", "Success", 0)
            self.File_TrackingTab.setEnabled(True)
            self.Email_AnalyzeTab.setEnabled(True)
            self.Data_ExtractVerifyTab.setEnabled(True)
        else:
            ctypes.windll.user32.MessageBoxW(0, "Wrong Password", "Error", 0)

    def Check_Attachments(self):
        self.Checkbox_Attachments.setChecked(True)
        self.Checkbox_Keyword.setChecked(False)

    def Check_Keyword(self):
        self.Checkbox_Keyword.setChecked(True)
        self.Checkbox_Attachments.setChecked(False)

    def Check_mft(self):
        self.Checkbox_mft.setChecked(True)
        self.Checkbox_email.setChecked(False)

    def Check_email(self):
        self.Checkbox_email.setChecked(True)
        self.Checkbox_mft.setChecked(False)

    def Make_Case(self):
        dir_name = self.InputCasename.text()
        if self.LineEdit_setPassword.text()=='':
            ctypes.windll.user32.MessageBoxW(0, "Input Password", "Alert", 0)
            return
        if dir_name:
            ip_address = '218.146.20.50'
            port_number = '9870'
            user_name = 'hadoopuser'
            host_address = 'http://' + ip_address + ':' + port_number
            hadoop = InsecureClient(host_address, user_name)
            try:
                if hadoop.list('/' + dir_name) == [] or hadoop.list('/' + dir_name):
                    ctypes.windll.user32.MessageBoxW(0, "Same Case name already existed", "Create Error", 0)
                    return
            except:
                hadoop.makedirs('/' + dir_name)
                hadoop.makedirs('/' + dir_name + '/report')
                enc = hashlib.new('md5')
                crypto=self.LineEdit_setPassword.text().encode('utf-8')
                enc.update(crypto)
                hadoop.write('/' + dir_name+'/password.txt',enc.hexdigest())
                ctypes.windll.user32.MessageBoxW(0, "Case Created", "Success", 0)
                self.InputCasename.setReadOnly(True)
        self.CaseName = self.InputCasename.text()

    def Close_Tab(self, currentIndex):
        self.SleuthkitTab.removeTab(currentIndex)

    def Clear_File(self):
        self.Fileroute_browser.setText('')

    def Find_File(self):
        fname = QFileDialog.getOpenFileName()
        self.Fileroute_browser.append(fname[0])

    def Find_Image(self):
        fname = QFileDialog.getOpenFileName()
        self.Fileroute_browser.append(fname[0])

    def Delete_Case(self):
        if self.CaseName=='':
            return
        dir_name = self.InputCasename.text()
        if dir_name and self.InputCasename.isReadOnly():
            ip_address = '218.146.20.50'
            port_number = '9870'
            user_name = 'hadoopuser'
            host_address = 'http://' + ip_address + ':' + port_number
            hadoop = InsecureClient(host_address, user_name)
            hadoop.delete('/' + dir_name, True)
            ctypes.windll.user32.MessageBoxW(0, "Case %s was Deleted" % dir_name, "Case Deleted", 0)
            self.InputCasename.setReadOnly(False)
            self.InputCasename.setText('')
        self.Fileroute_browser.setText('')
        self.tab = QtWidgets.QWidget()
        self.tab.setObjectName("tab")
        self.SleuthkitTab.addTab(self.tab, "")
        self.File_TrackingTab.setDisabled(True)
        self.Email_AnalyzeTab.setDisabled(True)
        self.Data_ExtractVerifyTab.setDisabled(True)

    def Upload_File(self):
        ip_address = '218.146.20.50'
        port_number = '9870'
        user_name = 'hadoopuser'
        if not self.Fileroute_browser.toPlainText():
            return
        else:
            file_name = self.Fileroute_browser.toPlainText().split('\n')
            dir_name = '/' + self.InputCasename.text()
            host_address = 'http://' + ip_address + ':' + port_number
            if file_name and self.InputCasename.text():
                try:
                    for file in file_name:
                        hadoop = InsecureClient(host_address, user_name)
                        hadoop.upload(dir_name, file)

                        self.tab = QtWidgets.QWidget()
                        self.tab.setObjectName("tab")
                        self.SleuthkitTab.addTab(self.tab, file.split('/')[-1])
                        self.Sleuthkit_leftview = QtWidgets.QTextBrowser(self.tab)
                        self.Sleuthkit_leftview.setGeometry(QtCore.QRect(20, 10, 551, 481))
                        self.Sleuthkit_rightview = QtWidgets.QTextBrowser(self.tab)
                        self.Sleuthkit_rightview.setGeometry(QtCore.QRect(600, 10, 551, 481))
                        cli = paramiko.SSHClient()
                        cli.set_missing_host_key_policy(paramiko.AutoAddPolicy)
                        cli.connect("218.146.20.50", port=2185, username="hadoopuser", password="bob")

                        command = 'python3 /home/hadoopuser/python_code/MICAS/ntfs_parse/hs.py /hdfs/test_case/m1.001'
                        stdin, stdout, stderr = cli.exec_command(command)
                        sector = stdout.read().decode('utf-8').replace('\n', '')

                        command = 'fsstat -o %s /hdfs/test_case/m1.001' % sector
                        stdin, stdout, stderr = cli.exec_command(command)
                        fsstat_result = stdout.read().decode('utf-8')
                        self.Sleuthkit_rightview.setText(fsstat_result)

                        command = 'img_stat /hdfs/test_case/m1.001'
                        stdin, stdout, stderr = cli.exec_command(command)
                        imgstat_result = stdout.read().decode('utf-8')
                        self.Sleuthkit_leftview.append('--------------------------------------------')
                        self.Sleuthkit_leftview.append(imgstat_result)

                        command = 'mmstat /hdfs/test_case/m1.001'
                        stdin, stdout, stderr = cli.exec_command(command)
                        mmstat_result = stdout.read().decode('utf-8')
                        self.Sleuthkit_leftview.append('--------------------------------------------')
                        self.Sleuthkit_leftview.append(mmstat_result)

                        command = 'mmls /hdfs/test_case/m1.001'
                        stdin, stdout, stderr = cli.exec_command(command)
                        mmls_result = stdout.read().decode('utf-8')
                        self.Sleuthkit_leftview.append('--------------------------------------------')
                        self.Sleuthkit_leftview.append(mmls_result)

                    self.SleuthkitTab.removeTab(0)
                    self.File_TrackingTab.setEnabled(True)
                    self.Email_AnalyzeTab.setEnabled(True)
                    self.Data_ExtractVerifyTab.setEnabled(True)
                    ctypes.windll.user32.MessageBoxW(0, "Upload completed", "File Upload", 0)

                except:
                    # ctypes.windll.user32.MessageBoxW(0, "Same file existed", "Upload Error", 0)
                    pass
            else:
                ctypes.windll.user32.MessageBoxW(0, "Make Case First", "Upload Error", 0)
                return
        # self.CaseName = self.InputCasename.text()

        # 서버 자동화 실행 코드 호출하기
        cli.close()

    def Get_Document(self):
        mftmodel = self.Create_MFTmodel()
        self.Viewer_FileDB.setModel(mftmodel)

        cli = paramiko.SSHClient()
        cli.set_missing_host_key_policy(paramiko.AutoAddPolicy)
        cli.connect("218.146.20.50", port=2185, username="hadoopuser", password="bob")
        stdin, stdout, stderr = cli.exec_command('file /hdfs/%s/VisualizeMFT_result.txt' % self.CaseName)
        stdout = ''.join(stdout.readlines())
        if stdout.endswith('(No such file or directory)\n'):
            command = 'python3 /home/hadoopuser/python_code/MICAS/data_handling/Extract_Verify.py 0 %s' % self.CaseName
            stdin, stdout, stderr = cli.exec_command(command)
            time.sleep(5)

        command = 'cat /hdfs/%s/VisualizeMFT_result.txt' % self.CaseName
        stdin, stdout, stderr = cli.exec_command(command)
        lines = stdout.readlines()
        resultData = ''.join(lines)
        column = resultData.split('\n')
        for i in range(0, len(column) - 1):
            self.Add_file_MFT(mftmodel, column[i].split(';')[0], column[i].split(';')[1], column[i].split(';')[2],
                              column[i].split(';')[3], column[i].split(';')[4], column[i].split(';')[5],
                              column[i].split(';')[6], column[i].split(';')[7])
        cli.close()
        self.Button_ExtractFile.setEnabled(True)
        self.Button_VerifyFile.setEnabled(True)
        self.Button_SearchFile.setEnabled(True)
        self.Viewer_FileDB_Status = 1

    # casename 적용
    def Get_Attachfile(self):
        emailmodel = self.Create_Emailmodel()
        self.Viewer_FileDB.setModel(emailmodel)
        cli = paramiko.SSHClient()
        cli.set_missing_host_key_policy(paramiko.AutoAddPolicy)
        cli.connect("218.146.20.50", port=2185, username="hadoopuser", password="bob")

        stdin, stdout, stderr = cli.exec_command('file /hdfs/%s/VisualizeEmail_result.txt' % self.CaseName)
        stdout = ''.join(stdout.readlines())
        if stdout.endswith('(No such file or directory)\n'):
            command = 'python3 /home/hadoopuser/python_code/MICAS/data_handling/Extract_Verify.py 1 %s' % self.CaseName
            stdin, stdout, stderr = cli.exec_command(command)
            time.sleep(5)
        command = 'cat /hdfs/%s/VisualizeEmail_result.txt' % self.CaseName
        stdin, stdout, stderr = cli.exec_command(command)
        lines = stdout.readlines()
        resultData = ''.join(lines)
        column = resultData.split('(!@#)')
        for i in range(0, len(column) - 1):
            self.Add_file_Email(emailmodel, column[i].split(';^;')[0], column[i].split(';^;')[1],
                                column[i].split(';^;')[2], column[i].split(';^;')[3], column[i].split(';^;')[4],
                                column[i].split(';^;')[5], column[i].split(';^;')[6], column[i].split(';^;')[7],
                                column[i].split(';^;')[8])
        cli.close()
        self.Button_ExtractFile.setEnabled(True)
        self.Button_SearchFile.setEnabled(True)
        self.Button_VerifyFile.setEnabled(True)
        self.Viewer_FileDB_Status = 2

    # casename 적용
    def Get_URL(self):
        urlmodel = self.Create_URLmodel()
        self.Viewer_FileDB.setModel(urlmodel)

        cli = paramiko.SSHClient()
        cli.set_missing_host_key_policy(paramiko.AutoAddPolicy)
        cli.connect("218.146.20.50", port=2185, username="hadoopuser", password="bob")
        stdin, stdout, stderr = cli.exec_command('file /hdfs/%s/VisualizeURL_result.txt' % self.CaseName)
        stdout = ''.join(stdout.readlines())

        if stdout.endswith('(No such file or directory)\n'):
            command = 'python3 /home/hadoopuser/python_code/MICAS/data_handling/Extract_Verify.py 2 %s' % self.CaseName
            stdin, stdout, stderr = cli.exec_command(command)
            time.sleep(5)
        command = 'cat /hdfs/%s/VisualizeURL_result.txt' % self.CaseName
        stdin, stdout, stderr = cli.exec_command(command)
        lines = stdout.readlines()
        resultData = ''.join(lines)
        column = resultData.split('(!@#)')

        for i in range(0, len(column) - 1):
            self.Add_file_URL(urlmodel, column[i].split(';^;')[0], column[i].split(';^;')[1], column[i].split(';^;')[2],
                              column[i].split(';^;')[3], column[i].split(';^;')[4], column[i].split(';^;')[5])
        cli.close()
        self.Button_SearchURL.setEnabled(True)
        self.Button_SearchURL.setEnabled(True)
        self.Viewer_FileDB_Status = 3

    # casename 적용
    def Create_MFTmodel(self):
        mftmodel = QStandardItemModel(0, 8)
        mftmodel.setHeaderData(0, Qt.Horizontal, "Document ID")
        mftmodel.setHeaderData(1, Qt.Horizontal, "File Name")
        mftmodel.setHeaderData(2, Qt.Horizontal, "File Path")
        mftmodel.setHeaderData(3, Qt.Horizontal, "SHA 256")
        mftmodel.setHeaderData(4, Qt.Horizontal, "Create Time")
        mftmodel.setHeaderData(5, Qt.Horizontal, "Modify Time")
        mftmodel.setHeaderData(6, Qt.Horizontal, "Access Time")
        mftmodel.setHeaderData(7, Qt.Horizontal, "Source Image")
        return mftmodel

    def Create_Emailmodel(self):
        emailmodel = QStandardItemModel(0, 9)
        emailmodel.setHeaderData(0, Qt.Horizontal, "Attach ID")
        emailmodel.setHeaderData(1, Qt.Horizontal, "To")
        emailmodel.setHeaderData(2, Qt.Horizontal, "From")
        emailmodel.setHeaderData(3, Qt.Horizontal, "File name")
        emailmodel.setHeaderData(4, Qt.Horizontal, "SHA 256")
        emailmodel.setHeaderData(5, Qt.Horizontal, "Subject")
        emailmodel.setHeaderData(6, Qt.Horizontal, "Date")
        emailmodel.setHeaderData(7, Qt.Horizontal, "Source File")
        emailmodel.setHeaderData(8, Qt.Horizontal, "Source Image")
        return emailmodel

    def Create_URLmodel(self):
        urlmodel = QStandardItemModel(0, 6)
        urlmodel.setHeaderData(0, Qt.Horizontal, "Email ID")
        urlmodel.setHeaderData(1, Qt.Horizontal, "To")
        urlmodel.setHeaderData(2, Qt.Horizontal, "From")
        urlmodel.setHeaderData(3, Qt.Horizontal, "Subject")
        urlmodel.setHeaderData(4, Qt.Horizontal, "Body")
        urlmodel.setHeaderData(5, Qt.Horizontal, "Date")
        return urlmodel

    def Add_file_MFT(self, mftmodel, Document_ID, File_Name, File_Path, SHA256, Create_Time, Modify_Time, Access_Time,
                     Source_Image):
        mftmodel.insertRow(0)
        mftmodel.setData(mftmodel.index(0, 0), Document_ID)
        mftmodel.setData(mftmodel.index(0, 1), File_Name)
        mftmodel.setData(mftmodel.index(0, 2), File_Path)
        mftmodel.setData(mftmodel.index(0, 3), SHA256)
        mftmodel.setData(mftmodel.index(0, 4), Create_Time)
        mftmodel.setData(mftmodel.index(0, 5), Modify_Time)
        mftmodel.setData(mftmodel.index(0, 6), Access_Time)
        mftmodel.setData(mftmodel.index(0, 7), Source_Image)

    def Add_file_Email(self, emailmodel, Attach_ID, To, From, SHA256, Subject, Filename, Date, Source_File,
                       Source_Image):
        emailmodel.insertRow(0)
        emailmodel.setData(emailmodel.index(0, 0), Attach_ID)
        emailmodel.setData(emailmodel.index(0, 1), To)
        emailmodel.setData(emailmodel.index(0, 2), From)
        emailmodel.setData(emailmodel.index(0, 3), SHA256)
        emailmodel.setData(emailmodel.index(0, 4), Subject)
        emailmodel.setData(emailmodel.index(0, 5), Filename)
        emailmodel.setData(emailmodel.index(0, 6), Date)
        emailmodel.setData(emailmodel.index(0, 7), Source_Image)
        emailmodel.setData(emailmodel.index(0, 8), Source_File)

    def Add_file_URL(self, urlmodel, Email_ID, To, From, Subject, Body, Date):
        urlmodel.insertRow(0)
        urlmodel.setData(urlmodel.index(0, 0), Email_ID)
        urlmodel.setData(urlmodel.index(0, 1), To)
        urlmodel.setData(urlmodel.index(0, 2), From)
        urlmodel.setData(urlmodel.index(0, 3), Subject)
        urlmodel.setData(urlmodel.index(0, 4), Body)
        urlmodel.setData(urlmodel.index(0, 5), Date)

    def Extract_File(self):
        save_route = QFileDialog.getExistingDirectory()
        if save_route == "":
            return
        cli = paramiko.SSHClient()
        cli.set_missing_host_key_policy(paramiko.AutoAddPolicy)
        cli.connect("218.146.20.50", port=2185, username="hadoopuser", password="bob")

        try:
            if self.Checkbox_mft.isChecked():
                stdin, stdout, stderr = cli.exec_command('file /hdfs/%s/ExtractFile_MFTresult.txt' % self.CaseName)
                stdout = ''.join(stdout.readlines())
                if stdout.endswith('(No such file or directory)\n'):
                    command = 'python3 /home/hadoopuser/python_code/MICAS/data_handling/Extract_Verify.py 3 %s %s' % (
                        self.Line_Extractfile.text(), self.CaseName)
                    cli.exec_command(command)
                    time.sleep(5)
                stdin, stdout, stderr = cli.exec_command('cat /hdfs/%s/ExtractFile_MFTresult.txt' % self.CaseName)
                stdout = ''.join(stdout.readlines())
                scp = SCPClient(cli.get_transport())
                scp.get(stdout.split(';')[0], save_route + '/' + stdout.split(';')[-1])
                cli.exec_command('rm -rf /hdfs/%s/ExtractFile_MFTresult.txt' % self.CaseName)
            elif self.Checkbox_email.isChecked():
                stdin, stdout, stderr = cli.exec_command('file /hdfs/%s/ExtractFile_Emailresult.txt' % self.CaseName)
                stdout = ''.join(stdout.readlines())
                if stdout.endswith('(No such file or directory)\n'):
                    command = 'python3 /home/hadoopuser/python_code/MICAS/data_handling/Extract_Verify.py 4 %s %s' % (
                        self.Line_Extractfile.text(), self.CaseName)
                    cli.exec_command(command)
                    time.sleep(5)
                stdin, stdout, stderr = cli.exec_command('cat /hdfs/%s/ExtractFile_Emailresult.txt' % self.CaseName)
                stdout = ''.join(stdout.readlines())
                scp = SCPClient(cli.get_transport())
                scp.get(stdout, save_route + '/' + stdout.split('/')[-1])
                cli.exec_command('rm -rf /hdfs/%s/ExtractFile_Emailresult.txt' % self.CaseName)
            else:
                return
        except:
            if self.Checkbox_mft.isChecked():
                cli.exec_command('rm -rf /hdfs/%s/ExtractFile_MFTresult.txt' % self.CaseName)
            else:
                cli.exec_command('rm -rf /hdfs/%s/ExtractFile_Emailresult.txt' % self.CaseName)
            ctypes.windll.user32.MessageBoxW(0, "Can't extract This File", "Error", 0)

            cli.close()
            return
        cli.close()
        ctypes.windll.user32.MessageBoxW(0, "File Extract Completed", "Success", 0)

    # casename 적용
    def Verify_File(self):
        cli = paramiko.SSHClient()
        cli.set_missing_host_key_policy(paramiko.AutoAddPolicy)
        cli.connect("218.146.20.50", port=2185, username="hadoopuser", password="bob")

        if self.Checkbox_mft.isChecked():
            stdin, stdout, stderr = cli.exec_command('file /hdfs/%s/MFT_File%s_Verifyresult.txt' % (self.CaseName, self.Line_VerifyFile.text()))
            stdout = ''.join(stdout.readlines())

            if stdout.endswith('(No such file or directory)\n'):
                cli.exec_command('python3 /home/hadoopuser/python_code/MICAS/data_handling/Extract_Verify.py 5 %s %s' % (
                        self.Line_VerifyFile.text(), self.CaseName))
                print('python3 /home/hadoopuser/python_code/MICAS/data_handling/Extract_Verify.py 5 %s %s' % (
                        self.Line_VerifyFile.text(), self.CaseName))
                time.sleep(85)
            stdin, stdout, stderr = cli.exec_command(
                'cat /hdfs/%s/MFT_File%s_Verifyresult.txt' % (self.CaseName, self.Line_VerifyFile.text()))
            stdout = ''.join(stdout.readlines())
        elif self.Checkbox_email.isChecked():
            stdin, stdout, stderr = cli.exec_command('file /hdfs/%s/Email_File%s_Verifyresult.txt' % (self.CaseName, self.Line_VerifyFile.text()))
            stdout = ''.join(stdout.readlines())

            if stdout.endswith('(No such file or directory)\n'):
                cli.exec_command(
                    'python3 /home/hadoopuser/python_code/MICAS/data_handling/Extract_Verify.py 6 %s %s' % (
                        self.Line_VerifyFile.text(), self.CaseName))
                time.sleep(85)
            stdin, stdout, stderr = cli.exec_command(
                'cat /hdfs/%s/Email_File%s_Verifyresult.txt' % (self.CaseName, self.Line_VerifyFile.text()))
            stdout = ''.join(stdout.readlines())
        else:
            return

        self.Viewer_VerifyResult_top.setText(stdout.split(';')[0])
        bottom_result = stdout.split(';')[1].split('\n')

        for i in range(0, len(bottom_result) - 1):
            self.Add_Verify(bottom_result[i].split('^')[0], bottom_result[i].split('^')[1],bottom_result[i].split('^')[2], bottom_result[i].split('^')[3])
        cli.close()
        ctypes.windll.user32.MessageBoxW(0, "Verify Completed", "Success", 0)

    def Verify_URL(self):
        self.Line_SearchURL.setText(self.Line_SearchURL.text().replace(" ", "").replace("\n", ""))
        cli = paramiko.SSHClient()
        cli.set_missing_host_key_policy(paramiko.AutoAddPolicy)
        cli.connect("218.146.20.50", port=2185, username="hadoopuser", password="bob")
        filename = time.strftime('%Y-%m-%d_%H_%M_%S', time.localtime(time.time()))
        print('python3 /home/hadoopuser/python_code/MICAS/data_handling/Extract_Verify.py 9 %s %s %s' % (
            self.Line_SearchURL.text(), filename, self.CaseName))
        stdin, stdout, stderr = cli.exec_command('file /hdfs/%s/URL%s_Verifyresult.txt' % (self.CaseName, filename))
        stdout = ''.join(stdout.readlines())
        if stdout.endswith('(No such file or directory)\n'):
            cli.exec_command(
                "python3 /home/hadoopuser/python_code/MICAS/data_handling/Extract_Verify.py 9 '%s' %s %s" % (
                    self.Line_SearchURL.text(), filename, self.CaseName))
            time.sleep(10)
        stdin, stdout, stderr = cli.exec_command('cat /hdfs/%s/URL%s_Verifyresult.txt' % (self.CaseName, filename))
        stdout = ''.join(stdout.readlines())
        self.Viewer_VerifyResult_top.setText(stdout.split(';')[0])
        bottom_result = stdout.split(';')[1].split('\n')

        for i in range(0, len(bottom_result) - 1):
            self.Add_Verify(bottom_result[i].split('^')[0], bottom_result[i].split('^')[1],
                            bottom_result[i].split('^')[2], bottom_result[i].split('^')[3])
        cli.close()
        ctypes.windll.user32.MessageBoxW(0, "Verify Completed", "Success", 0)

    # casename 적용
    def Search_File(self):
        cli = paramiko.SSHClient()
        cli.set_missing_host_key_policy(paramiko.AutoAddPolicy)
        cli.connect("218.146.20.50", port=2185, username="hadoopuser", password="bob")

        if self.Checkbox_mft.isChecked():
            stdin, stdout, stderr = cli.exec_command(
                'file /hdfs/%s/MFT_File%s_Searchresult.txt' % (self.CaseName, self.Line_SearchFile.text()))
            stdout = ''.join(stdout.readlines())

            if stdout.endswith('(No such file or directory)\n'):
                cli.exec_command(
                    'python3 /home/hadoopuser/python_code/MICAS/data_handling/Extract_Verify.py 7 %s %s' % (
                        self.Line_SearchFile.text(), self.CaseName))
                time.sleep(10)
            stdin, stdout, stderr = cli.exec_command(
                'cat /hdfs/%s/MFT_File%s_Searchresult.txt' % (self.CaseName, self.Line_SearchFile.text()))
            stdout = ''.join(stdout.readlines())
        elif self.Checkbox_email.isChecked():
            stdin, stdout, stderr = cli.exec_command(
                'file /hdfs/%s/Email_File%s_Searchresult.txt' % (self.CaseName, self.Line_SearchFile.text()))
            stdout = ''.join(stdout.readlines())

            if stdout.endswith('(No such file or directory)\n'):
                cli.exec_command(
                    'python3 /home/hadoopuser/python_code/MICAS/data_handling/Extract_Verify.py 8 %s %s' % (
                        self.Line_SearchFile.text(), self.CaseName))
                time.sleep(10)
            stdin, stdout, stderr = cli.exec_command(
                'cat /hdfs/%s/Email_File%s_Searchresult.txt' % (self.CaseName, self.Line_SearchFile.text()))
            stdout = ''.join(stdout.readlines())
        else:
            return

        if (stdout.endswith('You can try verify.')):
            self.Viewer_VerifyResult_top.setText(stdout)
            return

        self.Viewer_VerifyResult_top.setText(stdout.split(';')[0])
        bottom_result = stdout.split(';')[1].split('\n')

        for i in range(0, len(bottom_result) - 1):
            self.Add_Verify(bottom_result[i].split('^')[0], bottom_result[i].split('^')[1],
                            bottom_result[i].split('^')[2], bottom_result[i].split('^')[3])
        ctypes.windll.user32.MessageBoxW(0, "Search Completed", "Success", 0)
        cli.close()

    # casename 적용
    def Create_Verifymodel(self):
        verifymodel = QStandardItemModel(0, 4)
        verifymodel.setHeaderData(0, Qt.Horizontal, "Vendor Name")
        verifymodel.setHeaderData(1, Qt.Horizontal, "Vendor Version")
        verifymodel.setHeaderData(2, Qt.Horizontal, "Scan Detected")
        verifymodel.setHeaderData(3, Qt.Horizontal, "Scan Result")
        return verifymodel

    def Add_Verify(self, Vendor_Name, Vendor_Version, Scan_Detected, Scan_Result):
        self.verifymodel.insertRow(0)
        self.verifymodel.setData(self.verifymodel.index(0, 0), Vendor_Name)
        self.verifymodel.setData(self.verifymodel.index(0, 1), Vendor_Version)
        self.verifymodel.setData(self.verifymodel.index(0, 2), Scan_Detected)
        self.verifymodel.setData(self.verifymodel.index(0, 3), Scan_Result)

    def Viewer_FileDBClicked(self, index):
        item = self.Viewer_FileDB.model().item(index.row(), 0)

        # self.Line_Extractfile.setText(item.data(0))
        self.Line_VerifyFile.setText(item.text())
        self.Line_Extractfile.setText(item.text())
        self.Line_SearchFile.setText(item.text())

    def Keyword_Search(self):
        cli = paramiko.SSHClient()
        cli.set_missing_host_key_policy(paramiko.AutoAddPolicy)
        cli.connect("218.146.20.50", port=2185, username="hadoopuser", password="bob")
        column = []
        if self.Viewer_FileDB_Status == 1:
            mftmodel = self.Create_MFTmodel()
            self.Viewer_FileDB.setModel(mftmodel)
            command = 'cat /hdfs/%s/VisualizeMFT_result.txt' % self.CaseName
            stdin, stdout, stderr = cli.exec_command(command)
            lines = ''.join(stdout.readlines()).split('\n')
            for i in range(0, len(lines) - 1):
                if lines[i].find(self.Line_KeywordSearch.text()) >= 1:
                    column.append(lines[i])

            for i in range(0, len(column)):
                self.Add_file_MFT(mftmodel, column[i].split(';')[0], column[i].split(';')[1], column[i].split(';')[2],
                                  column[i].split(';')[3], column[i].split(';')[4], column[i].split(';')[5],
                                  column[i].split(';')[6], column[i].split(';')[7])
        elif self.Viewer_FileDB_Status == 2:
            emailmodel = self.Create_Emailmodel()
            self.Viewer_FileDB.setModel(emailmodel)
            command = 'cat /hdfs/%s/VisualizeEmail_result.txt' % self.CaseName
            stdin, stdout, stderr = cli.exec_command(command)
            lines = ''.join(stdout.readlines()).split('(!@#)')

            for i in range(0, len(lines) - 1):
                if lines[i].find(self.Line_KeywordSearch.text()) >= 1:
                    column.append(lines[i])
            for i in range(0, len(column)):
                self.Add_file_Email(emailmodel, column[i].split(';^;')[0], column[i].split(';^;')[1],
                                    column[i].split(';^;')[2], column[i].split(';^;')[3], column[i].split(';^;')[4],
                                    column[i].split(';^;')[5], column[i].split(';^;')[6], column[i].split(';^;')[7],
                                    column[i].split(';^;')[8])
        elif self.Viewer_FileDB_Status == 3:
            urlmodel = self.Create_URLmodel()
            self.Viewer_FileDB.setModel(urlmodel)
            command = 'cat /hdfs/%s/VisualizeURL_result.txt' % self.CaseName
            stdin, stdout, stderr = cli.exec_command(command)
            lines = ''.join(stdout.readlines()).split('(!@#)')
            for i in range(0, len(lines) - 1):
                if lines[i].find(self.Line_KeywordSearch.text()) >= 1:
                    column.append(lines[i])
            for i in range(0, len(column)):
                self.Add_file_URL(urlmodel, column[i].split(';^;')[0], column[i].split(';^;')[1],
                                  column[i].split(';^;')[2], column[i].split(';^;')[3], column[i].split(';^;')[4],
                                  column[i].split(';^;')[5])
        cli.close()

    # casename 적용
    def Add_View_Email(self, view_emailmodel, Email_ID, To, From, Subject, Filename, Body, Date, Source_Image,
                       Source_File):
        view_emailmodel.insertRow(0)
        view_emailmodel.setData(view_emailmodel.index(0, 0), Email_ID)
        view_emailmodel.setData(view_emailmodel.index(0, 1), To)
        view_emailmodel.setData(view_emailmodel.index(0, 2), From)
        view_emailmodel.setData(view_emailmodel.index(0, 3), Subject)
        view_emailmodel.setData(view_emailmodel.index(0, 4), Filename)
        view_emailmodel.setData(view_emailmodel.index(0, 5), Body)
        view_emailmodel.setData(view_emailmodel.index(0, 6), Date)
        view_emailmodel.setData(view_emailmodel.index(0, 7), Source_Image)
        view_emailmodel.setData(view_emailmodel.index(0, 8), Source_File)

    def Create_ViewEmailmodel(self):
        view_emailmodel = QStandardItemModel(0, 9)
        view_emailmodel.setHeaderData(0, Qt.Horizontal, "Email ID")
        view_emailmodel.setHeaderData(1, Qt.Horizontal, "To")
        view_emailmodel.setHeaderData(2, Qt.Horizontal, "From")
        view_emailmodel.setHeaderData(3, Qt.Horizontal, "Subject")
        view_emailmodel.setHeaderData(4, Qt.Horizontal, "Filename")
        view_emailmodel.setHeaderData(5, Qt.Horizontal, "Body")
        view_emailmodel.setHeaderData(6, Qt.Horizontal, "Date")
        view_emailmodel.setHeaderData(7, Qt.Horizontal, "Source Image")
        view_emailmodel.setHeaderData(8, Qt.Horizontal, "Source File")
        return view_emailmodel

    def View_EmailData(self):
        view_emailmodel = self.Create_ViewEmailmodel()
        self.treeview_EmailData.setModel(view_emailmodel)
        cli = paramiko.SSHClient()
        cli.set_missing_host_key_policy(paramiko.AutoAddPolicy)
        cli.connect("218.146.20.50", port=2185, username="hadoopuser", password="bob")

        stdin, stdout, stderr = cli.exec_command('file /hdfs/%s/View_Email_result.txt' % self.CaseName)
        stdout = ''.join(stdout.readlines())
        print(stdout)
        if stdout.endswith('(No such file or directory)\n'):
            command = 'python3 /home/hadoopuser/python_code/MICAS/data_handling/Visualize_Email.py 2 %s' % self.CaseName
            stdin, stdout, stderr = cli.exec_command(command)
            time.sleep(10)
        command = 'cat /hdfs/%s/View_Email_result.txt' % self.CaseName
        stdin, stdout, stderr = cli.exec_command(command)
        lines = stdout.readlines()
        resultData = ''.join(lines)
        column = resultData.split('(!@#)')
        for i in range(0, len(column) - 1):
            self.Add_View_Email(view_emailmodel, column[i].split(';^;')[0], column[i].split(';^;')[1],
                                column[i].split(';^;')[2], column[i].split(';^;')[3], column[i].split(';^;')[4],
                                column[i].split(';^;')[5], column[i].split(';^;')[6], column[i].split(';^;')[7],
                                column[i].split(';^;')[8])
        cli.close()

    # casename 적용
    def View_Email_KeywordSearch(self):
        cli = paramiko.SSHClient()
        cli.set_missing_host_key_policy(paramiko.AutoAddPolicy)
        cli.connect("218.146.20.50", port=2185, username="hadoopuser", password="bob")
        column = []

        view_emailmodel = self.Create_ViewEmailmodel()
        self.treeview_EmailData.setModel(view_emailmodel)
        command = 'cat /hdfs/%s/View_Email_result.txt' % self.CaseName
        stdin, stdout, stderr = cli.exec_command(command)
        lines = ''.join(stdout.readlines()).split('(!@#)')

        for i in range(0, len(lines) - 1):
            if lines[i].find(self.lineEdit_ViewerSearch.text()) >= 1:
                column.append(lines[i])

        for i in range(0, len(column)):
            self.Add_file_Email(view_emailmodel, column[i].split(';^;')[0], column[i].split(';^;')[1],
                                column[i].split(';^;')[2], column[i].split(';^;')[3], column[i].split(';^;')[4],
                                column[i].split(';^;')[5], column[i].split(';^;')[6], column[i].split(';^;')[7],
                                column[i].split(';^;')[8])

    # casename 적용
    def Frequency_Date(self):
        cli = paramiko.SSHClient()
        cli.set_missing_host_key_policy(paramiko.AutoAddPolicy)
        cli.connect("218.146.20.50", port=2185, username="hadoopuser", password="bob")

        if self.Checkbox_Date.isChecked() and not self.Checkbox_Address.isChecked():
            command = 'python3 /home/hadoopuser/python_code/MICAS/data_handling/Visualize_Email.py 3 %s %s' % (
                self.DateEdit_Frequency.text(), self.CaseName)
            cli.exec_command(command)
            time.sleep(5)

            scp = SCPClient(cli.get_transport())
            scp.get('/hdfs/%s/report/%s Mail Send Count.png' % (self.CaseName, self.DateEdit_Frequency.text()))
            scene = QtWidgets.QGraphicsScene()
            pixmap = QPixmap('%s Mail Send Count.png' % self.DateEdit_Frequency.text())

            item = QtWidgets.QGraphicsPixmapItem(pixmap)
            scene.addItem(item)
            self.GraphicsView_Email.setScene(scene)
            os.remove('%s Mail Send Count.png' % self.DateEdit_Frequency.text())
        elif self.Checkbox_Date.isChecked() and self.Checkbox_Address.isChecked():
            command = 'python3 /home/hadoopuser/python_code/MICAS/data_handling/Visualize_Email.py 4 %s %s %s' % (
                self.DateEdit_Frequency.text(), self.lineEdit_FrequencyVis.text(), self.CaseName)
            cli.exec_command(command)
            time.sleep(5)

            scp = SCPClient(cli.get_transport())
            scp.get('/hdfs/%s/report/%s %s_Visualize.png' % (
                self.CaseName, self.DateEdit_Frequency.text(), self.lineEdit_FrequencyVis.text()))
            scene = QtWidgets.QGraphicsScene()
            pixmap = QPixmap(
                '%s %s_Visualize.png' % (self.DateEdit_Frequency.text(), self.lineEdit_FrequencyVis.text()))

            item = QtWidgets.QGraphicsPixmapItem(pixmap)
            scene.addItem(item)
            self.GraphicsView_Email.setScene(scene)
            os.remove('%s %s_Visualize.png' % (self.DateEdit_Frequency.text(), self.lineEdit_FrequencyVis.text()))

    # casename 적용
    def Visualize_Attachments_Keyword(self):
        if self.Checkbox_Attachments.isChecked():
            cli = paramiko.SSHClient()
            cli.set_missing_host_key_policy(paramiko.AutoAddPolicy)
            cli.connect("218.146.20.50", port=2185, username="hadoopuser", password="bob")

            command = 'python3 /home/hadoopuser/python_code/MICAS/data_handling/Visualize_Email.py 5 %s %s' % (
                self.lineEdit_AttachKeywordVis.text(), self.CaseName)
            cli.exec_command(command)

            time.sleep(5)
            scp = SCPClient(cli.get_transport())
            scp.get('/hdfs/%s/report/%s Filename Search result Visualize.png' % (
                self.CaseName, self.lineEdit_AttachKeywordVis.text()))

            scene = QtWidgets.QGraphicsScene()
            pixmap = QPixmap('%s Filename Search result Visualize.png' % self.lineEdit_AttachKeywordVis.text())

            item = QtWidgets.QGraphicsPixmapItem(pixmap)
            scene.addItem(item)
            self.GraphicsView_Email.setScene(scene)
            os.remove('%s Filename Search result Visualize.png' % self.lineEdit_AttachKeywordVis.text())

        if self.Checkbox_Keyword.isChecked():
            cli = paramiko.SSHClient()
            cli.set_missing_host_key_policy(paramiko.AutoAddPolicy)
            cli.connect("218.146.20.50", port=2185, username="hadoopuser", password="bob")

            command = 'python3 /home/hadoopuser/python_code/MICAS/data_handling/Visualize_Email.py 6 %s %s' % (
                self.lineEdit_AttachKeywordVis.text(), self.CaseName)
            cli.exec_command(command)
            time.sleep(5)

            scp = SCPClient(cli.get_transport())
            scp.get('/hdfs/%s/report/%s Keyword Search result Visualize.png' % (
                self.CaseName, self.lineEdit_AttachKeywordVis.text()))
            scene = QtWidgets.QGraphicsScene()
            pixmap = QPixmap('%s Keyword Search result Visualize.png' % self.lineEdit_AttachKeywordVis.text())

            item = QtWidgets.QGraphicsPixmapItem(pixmap)
            scene.addItem(item)
            self.GraphicsView_Email.setScene(scene)
            os.remove('%s Keyword Search result Visualize.png' % self.lineEdit_AttachKeywordVis.text())




    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "MICAS_v1.0"))
        self.Fileopen_Button.setText(_translate("MainWindow", "File Open"))
        self.Fileupload_Button.setText(_translate("MainWindow", "File Upload"))
        self.MakeCaseButton.setText(_translate("MainWindow", "Make Case"))
        self.InputCasename.setText(_translate("MainWindow", "Input Casename"))
        self.SleuthkitTab.setTabText(self.SleuthkitTab.indexOf(self.tab), _translate("MainWindow", "File"))
        self.ClearButton.setText(_translate("MainWindow", "Filelist Clear"))
        self.DeleteCase.setText(_translate("MainWindow", "Delete Case"))
        self.textBrowser.setHtml(_translate("MainWindow", "<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.0//EN\" \"http://www.w3.org/TR/REC-html40/strict.dtd\">\n"
"<html><head><meta name=\"qrichtext\" content=\"1\" /><style type=\"text/css\">\n"
"p, li { white-space: pre-wrap; }\n"
"</style></head><body style=\" font-family:\'Gulim\'; font-size:9pt; font-weight:400; font-style:normal;\">\n"
"<p align=\"right\" style=\" margin-top:12px; margin-bottom:12px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\"><img src=\"MICAS.png\" style=\"float: right;\" /></p>\n"
"<p align=\"right\" style=\" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\"><span style=\" font-size:8pt; font-weight:600;\">Multiple Image Correlation Analyze System     </span></p>\n"
"<p align=\"center\" style=\"-qt-paragraph-type:empty; margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\"><br /></p>\n"
"<p align=\"center\" style=\"-qt-paragraph-type:empty; margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\"><br /></p>\n"
"<p align=\"center\" style=\" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\"><span style=\" font-size:12pt; font-weight:600; color:#0000ff;\">MICAS</span><span style=\" font-size:12pt; color:#0000ff;\"> v1.0 Manual</span></p>\n"
"<p align=\"center\" style=\"-qt-paragraph-type:empty; margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\"><br /></p>\n"
"<p align=\"center\" style=\" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\">1.<span style=\" font-size:12pt;\"> </span>Input Case Name and Make Case.</p>\n"
"<p align=\"center\" style=\"-qt-paragraph-type:empty; margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\"><br /></p>\n"
"<p align=\"center\" style=\" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\">2. Select upload files.</p>\n"
"<p align=\"center\" style=\"-qt-paragraph-type:empty; margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\"><br /></p>\n"
"<p align=\"center\" style=\" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\">3. Upload file and wait for message.</p>\n"
"<p align=\"center\" style=\"-qt-paragraph-type:empty; margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\"><br /></p>\n"
"<p align=\"center\" style=\" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\">4. After uploading the file, you can proceed with the analysis.</p>\n"
"<p align=\"center\" style=\"-qt-paragraph-type:empty; margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\"><br /></p>\n"
"<p align=\"center\" style=\" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\">5. If you want delete case, close all tab first and click &quot;Delete Case&quot;</p>\n"
"<p align=\"center\" style=\"-qt-paragraph-type:empty; margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\"><br /></p>\n"
"<p align=\"center\" style=\" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\">6. Don\'t close new tab.</p></body></html>"))
        self.ImageOpen_Button.setText(_translate("MainWindow", "Image Open"))
        self.LoadCase_Button.setText(_translate("MainWindow", "Load Case"))
        self.LineEdit_setPassword.setText(_translate("MainWindow", "Input Password"))
        self.MainTab.setTabText(self.MainTab.indexOf(self.File_UploadTab), _translate("MainWindow", "Case Management"))
        self.MainTab.setTabText(self.MainTab.indexOf(self.File_TrackingTab), _translate("MainWindow", "File Tracking"))
        self.label_4.setText(_translate("MainWindow", "Whole User Email Data Relationship"))
        self.textBrowser_2.setHtml(_translate("MainWindow", "<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.0//EN\" \"http://www.w3.org/TR/REC-html40/strict.dtd\">\n"
"<html><head><meta name=\"qrichtext\" content=\"1\" /><style type=\"text/css\">\n"
"p, li { white-space: pre-wrap; }\n"
"</style></head><body style=\" font-family:\'Gulim\'; font-size:9pt; font-weight:400; font-style:normal;\">\n"
"<p align=\"center\" style=\" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\"><span style=\" font-size:10pt; font-weight:600; color:#00c700;\">●</span><span style=\" font-size:10pt; font-weight:600;\"> : Whitelist Address</span></p>\n"
"<p align=\"center\" style=\" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\"><span style=\" font-size:10pt; font-weight:600;\">Number : Communication Count</span></p></body></html>"))
        self.Tab_EmailAnalyze_Sub.setTabText(self.Tab_EmailAnalyze_Sub.indexOf(self.EmailSubtab), _translate("MainWindow", "Relation Visualize"))
        self.label_11.setText(_translate("MainWindow", "Email Data Viewer"))
        self.label_12.setText(_translate("MainWindow", "Viewer Search"))
        self.lineEdit_ViewerSearch.setText(_translate("MainWindow", "Enter Text"))
        self.Button_GetEmailData.setText(_translate("MainWindow", "Get Data"))
        self.Tab_EmailAnalyze_Sub.setTabText(self.Tab_EmailAnalyze_Sub.indexOf(self.Analyze_Details), _translate("MainWindow", "Analyze Details"))
        self.lineEdit_FrequencyVis.setText(_translate("MainWindow", "Input E-mail Address"))
        self.Button_Frequency.setText(_translate("MainWindow", "Get Data"))
        self.Checkbox_Attachments.setText(_translate("MainWindow", "Attachments"))
        self.label_14.setText(_translate("MainWindow", "Frequency Visualize"))
        self.label_15.setText(_translate("MainWindow", "Attachments & Keyword Visualize"))
        self.Checkbox_Address.setText(_translate("MainWindow", "With Email Address"))
        self.Checkbox_Keyword.setText(_translate("MainWindow", "Keyword"))
        self.Checkbox_Date.setText(_translate("MainWindow", "Only Date "))
        self.lineEdit_AttachKeywordVis.setText(_translate("MainWindow", "Enter Attachments or Keyword"))
        self.textBrowser_3.setHtml(_translate("MainWindow", "<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.0//EN\" \"http://www.w3.org/TR/REC-html40/strict.dtd\">\n"
"<html><head><meta name=\"qrichtext\" content=\"1\" /><style type=\"text/css\">\n"
"p, li { white-space: pre-wrap; }\n"
"</style></head><body style=\" font-family:\'Gulim\'; font-size:9pt; font-weight:400; font-style:normal;\">\n"
"<p style=\"-qt-paragraph-type:empty; margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\"><br /></p>\n"
"<p align=\"center\" style=\" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\"><span style=\" font-size:11pt; font-weight:600; color:#00007f;\">Visualize Details</span></p>\n"
"<p style=\"-qt-paragraph-type:empty; margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\"><br /></p>\n"
"<p style=\" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\">1. You can graph the daily mail usage of the image file.</p>\n"
"<p style=\" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\">    <span style=\" font-size:10pt;\">- option 1 : Only Date Search (only send count data)</span></p>\n"
"<p style=\" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\"><span style=\" font-size:10pt;\">    - option 2 : With Email Address Search (send+receive count data)</span></p>\n"
"<p style=\"-qt-paragraph-type:empty; margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\"><br /></p>\n"
"<p style=\" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\">2. You can check the traces of attachment file movement in the email data as a graph.</p>\n"
"<p style=\"-qt-paragraph-type:empty; margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\"><br /></p>\n"
"<p style=\" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\">3. You can see the order in which keywords are sent and received in a graph in the email data.</p></body></html>"))
        self.label_16.setText(_translate("MainWindow", "Visualize Graph Viewer"))
        self.Tab_EmailAnalyze_Sub.setTabText(self.Tab_EmailAnalyze_Sub.indexOf(self.Visualize_Details), _translate("MainWindow", "Visualize Details"))
        self.MainTab.setTabText(self.MainTab.indexOf(self.Email_AnalyzeTab), _translate("MainWindow", "Email Analyze"))
        self.Line_VerifyFile.setText(_translate("MainWindow", "Input ID..."))
        self.Button_VerifyFile.setText(_translate("MainWindow", "Verify File"))
        self.Line_Extractfile.setText(_translate("MainWindow", "Input ID..."))
        self.Button_ExtractFile.setText(_translate("MainWindow", "Extract"))
        self.Button_GetDocument.setText(_translate("MainWindow", "Get Document File list"))
        self.Line_SearchFile.setText(_translate("MainWindow", "Input ID..."))
        self.Line_SearchURL.setText(_translate("MainWindow", "Input URL..."))
        self.Button_SearchFile.setText(_translate("MainWindow", "Search File"))
        self.Button_SearchURL.setText(_translate("MainWindow", "Search URL"))
        self.Button_GetURL.setText(_translate("MainWindow", "Get URL list"))
        self.Button_GetAttachfile.setText(_translate("MainWindow", "Get Attachment file list"))
        self.Manual_DataExtractVerify.setHtml(_translate("MainWindow", "<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.0//EN\" \"http://www.w3.org/TR/REC-html40/strict.dtd\">\n"
"<html><head><meta name=\"qrichtext\" content=\"1\" /><style type=\"text/css\">\n"
"p, li { white-space: pre-wrap; }\n"
"</style></head><body style=\" font-family:\'Gulim\'; font-size:9pt; font-weight:400; font-style:normal;\">\n"
"<p align=\"center\" style=\"-qt-paragraph-type:empty; margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\"><br /></p>\n"
"<p align=\"center\" style=\" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\"><span style=\" font-size:11pt; font-weight:600; color:#00007f;\">Data Extract/Verify</span></p>\n"
"<p align=\"center\" style=\"-qt-paragraph-type:empty; margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\"><br /></p>\n"
"<p align=\"center\" style=\"-qt-paragraph-type:empty; margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\"><br /></p>\n"
"<p align=\"center\" style=\" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\">1. You can get document file list in MFT.</p>\n"
"<p align=\"center\" style=\"-qt-paragraph-type:empty; margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\"><br /></p>\n"
"<p align=\"center\" style=\" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\">2. You can get Attachment file list in E-mail data.</p>\n"
"<p align=\"center\" style=\"-qt-paragraph-type:empty; margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\"><br /></p>\n"
"<p align=\"center\" style=\" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\">3. You can get URL list in E-mail Body data.</p>\n"
"<p align=\"center\" style=\"-qt-paragraph-type:empty; margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\"><br /></p>\n"
"<p align=\"center\" style=\" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\">4. You have to check first according to the target you want.</p>\n"
"<p align=\"center\" style=\"-qt-paragraph-type:empty; margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\"><br /></p>\n"
"<p align=\"center\" style=\" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\">5. Input the ID of the row you want to analyze.</p></body></html>"))
        self.Checkbox_mft.setText(_translate("MainWindow", " MFT"))
        self.label.setText(_translate("MainWindow", "Virus Total Summary Panel"))
        self.label_2.setText(_translate("MainWindow", "Virus Total Detail Panel"))
        self.label_3.setText(_translate("MainWindow", "Data Table Panel"))
        self.label_5.setText(_translate("MainWindow", "Virus Total Submit"))
        self.Checkbox_email.setText(_translate("MainWindow", " E-mail"))
        self.label_6.setText(_translate("MainWindow", "File Extract"))
        self.label_7.setText(_translate("MainWindow", "Select Data"))
        self.label_8.setText(_translate("MainWindow", "MFT Table"))
        self.label_9.setText(_translate("MainWindow", "E-mail Table"))
        self.label_10.setText(_translate("MainWindow", "Keyword Search"))
        self.Line_KeywordSearch.setText(_translate("MainWindow", "Enter Keyword"))
        self.label_13.setText(_translate("MainWindow", "It takes about 1 minute"))
        self.MainTab.setTabText(self.MainTab.indexOf(self.Data_ExtractVerifyTab), _translate("MainWindow", "Data Extract/Verify"))
        self.actionfile.setText(_translate("MainWindow", "file"))
from matplotlibwidget import matplotlibWidget


if __name__ == "__main__":
    import sys
    app = QtWidgets.QApplication(sys.argv)
    MainWindow = QtWidgets.QMainWindow()
    ui = Ui_MainWindow()
    ui.setupUi(MainWindow)
    MainWindow.show()
    sys.exit(app.exec_())
